SiamCi integration prototype
Created 2/9/2011
Carlos Rueda - MBARI

2011-02-27
	- Incorporated more SIAM functionality into the tests. 
	  A simple interface, ISiam, and corresponding implementation, Siam, were created to facilitate
	  operations in the SIAM-CI adapter, in concrete, SiamCiServerGpb.
	  (Note that there is no a proper SIAM API library.) 
	  
	- Included (via hard link) TestSiamInstrument1.java from my local image of the SIAM code base
	  so it gets into this project's git repo.
	  The package is siam.test.devices.device1, which also includes corresp. Makefile to be
	  used in the main SIAM directory to create the instrument service JAR. 
	  
	- Included (via hard link) net/ooici/play/instr/instrument_defs.proto from my local image of 
	  the ion-object-definitions project so it gets into this project's git repo.
	  The location here is under src/main/gpb.
	  
	- Updated documentation.
	
	
2011-02-26
	- Basic functionality about RPC requests from python and corresponding replies from java
	  is now enabled. This is using GPB messages directly (not ION messages).
	  Unfortunately, it was confusing how to implement an ION-based messaging mechanism. 
	  In particular, the rpc_send methods, although straightforward to use against services 
	  running in the python capability container, are not suitable (or I couldn't figure) for 
	  use against external services (like SiamCiServerGpb).
	  
	- SiamCiServerGpb: this is the RPC server using GPB messages directly. It can be tested
	  with the gpb_send_rpc.py script and also with new scripts on the ioncore-python side.
	  New modules under src/main/python/ion/agents/instrumentagents/:
		SiamCi_proxy  -- Client to the SiamCi adapter
		test/test_SiamCi.py
	
	Tests:
	- Run the SIAM-CI adapter:
		$ mvn compile exec:java -Dsiam-ci
		===========Waiting for call============
		net.ooici.siamci.impl.gpb.SiamCiServerGpb._run(){89} -  [x] Received body len 31
		net.ooici.siamci.impl.gpb.SiamCiServerGpb._run(){90} -  [x]   with replyTo= 'amq.gen-EBgFII0MOraQRHhvdg8rLA==' corr_id='85d59ebf-a405-49ad-9fd1-0b19b50ea9c9'
		net.ooici.siamci.impl.gpb.SiamCiServerGpb._run(){91} -  [x]     contentType= 'application/octet-stream'
		net.ooici.siamci.impl.gpb.SiamCiServerGpb._showMessage(){138} -  [x] Command received:
		    class net.ooici.play.instr.InstrumentDefs$Command
		    | command: "hiCmd"
		    | args {
		    |   channel: "ch1"
		    |   parameter: "pr1"
		    | }
		    | args {
		    |   channel: "ch2"
		    |   parameter: "pr2"
		    | }
		net.ooici.siamci.impl.gpb.SiamCiServerGpb._showMessage(){138} -  [x] Response replied:
		    class net.ooici.play.instr.InstrumentDefs$SuccessFail
		    | result: ERROR
		    | item {
		    |   type: STR
		    |   str: "Command \'hiCmd\' not implemented"
		    | }
		
	- A simple client:
		$ python src/main/python/play/pika/gpb_send_rpc.py 
		[INFO     2011-02-26 23:17:56,849  #36891] Sending command WITH CORR ID: 85d59ebf-a405-49ad-9fd1-0b19b50ea9c9
		[INFO     2011-02-26 23:17:56,850  #36891] Command sent:
		    <class 'net.ooici.play.instr.instrument_defs_pb2.Command'>
		    | command: "hiCmd"
		    | args {
		    |   channel: "ch1"
		    |   parameter: "pr1"
		    | }
		    | args {
		    |   channel: "ch2"
		    |   parameter: "pr2"
		    | }
		    | 
		[INFO     2011-02-26 23:17:56,853  #36891] correlation_id --> None
		[INFO     2011-02-26 23:17:56,854  #36891] Command received:
		    <class 'net.ooici.play.instr.instrument_defs_pb2.Command'>
		    | args {
		    |   parameter: "Command \'hiCmd\' not implemented"
		    | }
		    
	- with the server running, run the test on ioncore-python:
		(py_buildout)carueda:ioncore-python carueda$ trial ion/agents/instrumentagents/test/test_SiamCi.py
		...
		ion.agents.instrumentagents.test.test_SiamCi
		  TestSiamCi
		    test_ping ... ping response:
		    <class 'net.ooici.play.instr.instrument_defs_pb2.SuccessFail'>
		    | result: OK
		    | 
		                                                         [OK]
		
		-------------------------------------------------------------------------------
		Ran 1 tests in 0.731s
		
		PASSED (successes=1)
		 	
	
	
2011-02-24
	- project now hosted at http://gitorious.org/siamci
	- made hard links to Siam_driver.py and test_Siam.py to facilitate version control for the moment.
	
	- Created profiles in the pom to facilitate tests from the command line, and updated README.
	
2011-02-23
	- added src/main/python/ion/agents/instrumentagents/ directory to keep a copy of:
		Siam_driver.py
		test/test_Siam.py
	  from my local image of ioncore-python, while these elements get pushed to an appropriate OOICI repo.
	  
	- Updated dependencies according to recent updates in ion-object-definitions and ioncore-java
	
	- Initial structure of interfaces (ISiamCiFactory, ISiamCiAdapter) and
	  preliminary implementation. 
	  
	- The overall implementation idea is as follows:
		- The SIAM-CI adapter launches a process to dispatch messages received on a certain queue 
		  (by default called SIAM-CI).
		- IonMock: a simple program that sends a message to the adapter and displays the response.
		  This is while the corresponding functionality is enabled on the python side.
		  
	- Test:
	
		1- have rabbitmq running on localhost
		
		2- launch SiamCiMain
			net.ooici.siamci.impl.SiamCiProcess.<init>(){35} - Creating SiamCiProcess
			Opened channel on host localhost, port 5672
			Declared queue amq.gen-ObUk6ROJeWxx4EuS3vsbzg==
			Bound queue amq.gen-ObUk6ROJeWxx4EuS3vsbzg== to exchange magnet.topic with binding key 375a55fb-56e8-4bed-b874-2b19d06c2fb0.1
			Spawned process 375a55fb-56e8-4bed-b874-2b19d06c2fb0.1
			net.ooici.siamci.impl.SiamCiAdapterImpl.start(){28} - starting process
			net.ooici.siamci.impl.SiamCiProcess.run(){44} - Running SiamCiProcess
			net.ooici.siamci.impl.SiamCiProcess._run(){62} - 
			===================================================================
			Waiting for message ...
					
		3- Run IonMock  -- 
		  Lots of lines including:
			net.ooici.siamci.ion.IonMock.testSendReceive(){41} - 
			>>>>>>>>>>>>>>>>>Test Send/Receive<<<<<<<<<<<<<<<<<
			...			
			============== Object ==============
			command: "get"
			args {
			  channel: "ch1"
			  parameter: "foo"
			}
			====================================
			
			...			
			net.ooici.siamci.ion.IonMock.testSendReceive(){48} - 
			******Prepare MsgBrokerClient******
			Opened channel on host localhost, port 5672
			Declared queue amq.gen-LaiEgQzLZjbebRQOuQOPwg==
			Bound queue amq.gen-LaiEgQzLZjbebRQOuQOPwg== to exchange magnet.topic with binding key dfa2afb3-3aef-4e62-8229-fb57e0a0f49b.1
			Spawned process dfa2afb3-3aef-4e62-8229-fb57e0a0f49b.1
			net.ooici.siamci.ion.IonMock.testSendReceive(){56} - 
			******RPC Send******
			Sent message to exchange magnet.topic with routing key testing.siam-ci, msglen 363
			set encoding to: application/ion-jsond
			Message received on queue amq.gen-LaiEgQzLZjbebRQOuQOPwg==, msglen 400
			net.ooici.siamci.ion.IonMock.testSendReceive(){61} - 
			******Unpack Message******
			net.ooici.siamci.ion.IonMock.testSendReceive(){63} -  reply.getContent class = class java.lang.String
			net.ooici.siamci.ion.IonMock.testSendReceive(){65} - !!!!!!!! content is String -- using getBytes  !!!!!
			...		
			
		 While SiamCiMain outputs:
			set encoding to: ION R1 GPB
			Message received on queue SIAM-CI, msglen 363
			net.ooici.siamci.impl.SiamCiProcess._run(){72} - headers: {sender=dfa2afb3-3aef-4e62-8229-fb57e0a0f49b.1, receiver=testing.siam-ci, op=respond, conv-id=#0, encoding=ION R1 GPB, reply-to=dfa2afb3-3aef-4e62-8229-fb57e0a0f49b.1, accept-encoding=application/ion-jsond, conv-seq=1}
			net.ooici.siamci.impl.SiamCiProcess._run(){81} - receiver = testing.siam-ci    reply-to: dfa2afb3-3aef-4e62-8229-fb57e0a0f49b.1
			Sent message to exchange magnet.topic with routing key dfa2afb3-3aef-4e62-8229-fb57e0a0f49b.1, msglen 400
			net.ooici.siamci.impl.SiamCiProcess._run(){62} - 
			===================================================================
			Waiting for message ...
		 	
		
		
2011-02-21
	- various updates according to newest images of ion-object-definitions and ioncore-java.
	- etc/build.xml: "install" macro
	- ion.example: EchoClientTest and IonSimpleEcho: a simple test of communication of messages
	  related with instruments, which I added to my fork carueda/ion-object-definitions
	
2011-02-09
	- initial preparations for using maven and setting up dependencies on incore-java and
	  SIAM libraries. Initial test with emulating SIAM's listPort utility OK.
	- I'm hosting this project on a personal SVN repository for the moment.