SiamCi integration prototype
Created 2/9/2011
Carlos Rueda - MBARI

2011-03-24
	- show the available ports at initialization of SiamCiMain.
	- when unmarshalling error: log.warn with no exception and log.debug with the exception 
	- consistent use of slf4j in the various sources
	- Moved python elements to [src/main/python/]ion/siamci/
	  Once the SIAM-CI adapter is running, the python tests can be run as follows:
	  	$ cd /path/to/ioncore-python
	  	$ ln -s /path/to/siamci/src/main/python/ion/siamci ion/
	  	$ SIAM_CI="-" bin/trial ion/siamci/test/
	
2011-03-23
	- new class SiamCiTestCase(IonTestCase) as the base class for all SIAM-CI tests in python.
	  the SIAM_CI env variable is used to actually run the tests.
	- SiamCiMain now accepts parameters using jopt-simple (currently --siam, and --help) 
	- Graceful termination with ^C
	  
2011-03-22
	- Moved net.ooici.play.instr.instrument_defs.proto --> net.ooici.play.instr_driver_interface.proto
	
	- NOTE: upon refresh of the ioncore-python and ioncore-java clones, the python-java communication
	  was broken.  It turns out the "user-id" and "expiry" headers are now required for proper handling on 
	  the python side. Fixed now.  See SiamCiServerIonMsg._run().
	  
	
2011-03-21
	- Adjustments upon clone updates of ion-object-definitions, ioncore-python 
	
	
2011-03-08
	- organized logging output and added log4.properties
	- SiamCiServerIonMsg: temporary use of System.setOut to a file as ioncore-java writes some messages to
	  stdout.
	
	- More consistent handling of instrument driver operations (fetch_params, set_params, get_status, 
	  get_last_sample, list_ports, etc).  However, this is yet to be completed as the data structures
	  suggested by [1] and [2] are harmonized.
	  [1] https://confluence.oceanobservatories.org/display/CIDev/Instrument+Driver+Interface
	  [2] ioncore-python: ion/agents/instrumentagents/instrument_agent.py
	  
	- More TODOs and FIXMEs annotations in the code.
	
	Current test:
	
	- - - - - -  In <base_dir>/siamci  - - - - - - -
	$ mvn clean compile exec:java -Dsiam-ci
	03-08-2011 22:21:13,182 [net.ooici.siamci.SiamCiMain.main()] DEBUG siam.Siam - getNodeURL(): input=localhost
	03-08-2011 22:21:13,407 [net.ooici.siamci.SiamCiMain.main()] INFO  net.ooici.siamci.SiamCiMain - siamCiFactory: net.ooici.siamci.impl.SiamCiFactoryImpl
	03-08-2011 22:21:13,407 [net.ooici.siamci.SiamCiMain.main()] INFO  net.ooici.siamci.SiamCiMain - siam: siam.Siam
	03-08-2011 22:21:13,408 [net.ooici.siamci.SiamCiMain.main()] INFO  net.ooici.siamci.SiamCiMain - requestProcessor: net.ooici.siamci.impl.RequestProcessor
	03-08-2011 22:21:13,408 [net.ooici.siamci.SiamCiMain.main()] INFO  net.ooici.siamci.SiamCiMain - siamCiAdapter: net.ooici.siamci.impl.ionmsg.SiamCiAdapterIonMsg
	03-08-2011 22:21:13,409 [net.ooici.siamci.SiamCiMain.main()] INFO  net.ooici.siamci.impl.ionmsg.SiamCiServerIonMsg - Creating SiamCiProcess
	03-08-2011 22:21:13,525 [net.ooici.siamci.SiamCiMain.main()] INFO  net.ooici.siamci.impl.ionmsg.SiamCiAdapterIonMsg - starting process
	03-08-2011 22:21:13,526 [SiamCiServerIonMsg] INFO  net.ooici.siamci.impl.ionmsg.SiamCiServerIonMsg - Running SiamCiServerIonMsg
	03-08-2011 22:21:13,526 [SiamCiServerIonMsg] INFO  net.ooici.siamci.impl.ionmsg.SiamCiServerIonMsg - Waiting for request ...
	

	- - - - - -  In <base_dir>/ioncore-python  - - - - - - -
	(py_buildout)carueda:ioncore-python carueda$ trial ion/agents/instrumentagents/test/test_Siam*.py
	ion.agents.instrumentagents.test.test_SiamCi
	  TestSiamCi
	    test_fetch_params_all ...                                              [OK]
	    test_fetch_params_some ...                                             [OK]
	    test_get_last_sample ...                                               [OK]
	    test_get_status ...                                                    [OK]
	    test_list_ports ...                                                    [OK]
	    test_ping ...                                                          [OK]
	    test_set_params ...                                                    [OK]
	ion.agents.instrumentagents.test.test_Siam
	  TestSiam
	    test_execute ...                                                  [SKIPPED]
	    test_fetch_params_all ...                                              [OK]
	    test_fetch_params_some ...                                             [OK]
	    test_fetch_set ...                                                     [OK]
	    test_get_last_sample ...                                               [OK]
	    test_get_status ...                                                    [OK]
	    test_initialize ...                                               [SKIPPED]
	    test_list_ports ...                                                    [OK]
	    test_ping ...                                                          [OK]
	
	===============================================================================
	[SKIPPED]
	Not implemented yet
	
	ion.agents.instrumentagents.test.test_Siam.TestSiam.test_execute
	ion.agents.instrumentagents.test.test_Siam.TestSiam.test_initialize
	-------------------------------------------------------------------------------
	Ran 16 tests in 7.413s
	
	PASSED (skips=2, successes=14)



2011-03-07
	- ION messaging finally working. Using the following for the basic functionality
		- src/main/java/ion/example/IonSimpleEcho
		- src/main/java/ion/example/EchoClientTest
		- src/main/python/ion/agents/instrumentagents/test/test_echo_service_in_java.py
		The latter is hard linked to ../ioncore-python/ion/agents/instrumentagents/test/test_echo_service_in_java.py
		to faciliate test from the ioncore-python.
		
	Now, preparing SIAM-CI adapter code to enable this ION messaging mechanism.
	- New IRequestProcessor (and corresponding implementation) to decouple the processing of requests from
	  the actual messaging mechanism.
	- Updated various sources according to this refactoring and updated ION-related implemention of 
	  the ISiamCiAdapter interface, see in particular SiamCiServerIonMsg, which is the one directly
	  related with messaging using ION mechanism.
	  
	- SiamCi_proxy.py  now working with ION messaging; see test_SiamCi.py
	- SiamCi_driver.py now working with ION messaging; see test_Siam.py
	
	The test runs as follows:
	
	- - - - - -  In <base_dir>/siamci  - - - - - - -
	$ mvn clean compile exec:java -Dsiam-ci
	net.ooici.siamci.impl.RequestProcessor.<init>(){38} - CommandProcessor created.
	net.ooici.siamci.SiamCiMain.<init>(){53} - siamCiFactory: net.ooici.siamci.impl.SiamCiFactoryImpl
	net.ooici.siamci.SiamCiMain.<init>(){54} - siam: siam.Siam
	net.ooici.siamci.SiamCiMain.<init>(){55} - requestProcessor: net.ooici.siamci.impl.RequestProcessor
	net.ooici.siamci.SiamCiMain.<init>(){56} - siamCiAdapter: net.ooici.siamci.impl.ionmsg.SiamCiAdapterIonMsg
	net.ooici.siamci.impl.ionmsg.SiamCiServerIonMsg.<init>(){78} - Creating SiamCiProcess
	Opened channel on host localhost, port 5672
	Declared queue SIAM-CI
	Bound queue SIAM-CI to exchange magnet.topic with binding key SIAM-CI
	net.ooici.siamci.impl.ionmsg.SiamCiAdapterIonMsg.start(){34} - starting process
	net.ooici.siamci.impl.ionmsg.SiamCiServerIonMsg.run(){91} - Running SiamCiServerIonMsg
	net.ooici.siamci.impl.ionmsg.SiamCiServerIonMsg._run(){112} - Waiting for request ...

	
	- - - - - -  In <base_dir>/ioncore-python  - - - - - - -
	(py_buildout)carueda:ioncore-python carueda$ trial ion/agents/instrumentagents/test/test_Siam*.py
	ion.agents.instrumentagents.test.test_SiamCi
	  TestSiamCi
	    test_get_last_sample ...                                               [OK]
	    test_get_status ...                                                    [OK]
	    test_list_ports ...                                                    [OK]
	    test_ping ...                                                          [OK]
	ion.agents.instrumentagents.test.test_Siam
	  TestSiam
	    test_get_last_sample ...                                               [OK]
	    test_get_status ...                                                    [OK]
	    test_initialize ...                                               [SKIPPED]
	    test_list_ports ...                                                    [OK]
	    test_ping ...                                                          [OK]
	
	===============================================================================
	[SKIPPED]
	Not implemented yet
	
	ion.agents.instrumentagents.test.test_Siam.TestSiam.test_initialize
	-------------------------------------------------------------------------------
	Ran 9 tests in 5.835s
	
	PASSED (skips=1, successes=8)
	


2011-02-27
	- Incorporated more SIAM functionality into the tests. 
	  A simple interface, ISiam, and corresponding implementation, Siam, were created to facilitate
	  operations in the SIAM-CI adapter, in concrete, SiamCiServerGpb.
	  
	- Included (via hard link) TestSiamInstrument1.java from my local image of the SIAM code base
	  so it gets into this project's git repo.
	  The package is siam.test.devices.device1, which also includes corresp. Makefile to be
	  used in the main SIAM directory to create the instrument service JAR. 
	  
	- Included (via hard link) net/ooici/play/instr/instrument_defs.proto from my local image of 
	  the ion-object-definitions project so it gets into this project's git repo.
	  The location here is under src/main/gpb.
	  
	- Updated documentation.
	
	
2011-02-26
	- Basic functionality about RPC requests from python and corresponding replies from java
	  is now enabled. This is using GPB messages directly (not ION messages).
	  Unfortunately, it was confusing how to implement an ION-based messaging mechanism. 
	  In particular, the rpc_send methods, although straightforward to use against services 
	  running in the python capability container, are not suitable (or I couldn't figure) for 
	  use against external services (like SiamCiServerGpb).
	  
	- SiamCiServerGpb: this is the RPC server using GPB messages directly. It can be tested
	  with the gpb_send_rpc.py script and also with new scripts on the ioncore-python side.
	  New modules under src/main/python/ion/agents/instrumentagents/:
		SiamCi_proxy  -- Client to the SiamCi adapter
		test/test_SiamCi.py
	
	Tests:
	- Run the SIAM-CI adapter:
		$ mvn compile exec:java -Dsiam-ci
		===========Waiting for call============
		net.ooici.siamci.impl.gpb.SiamCiServerGpb._run(){89} -  [x] Received body len 31
		net.ooici.siamci.impl.gpb.SiamCiServerGpb._run(){90} -  [x]   with replyTo= 'amq.gen-EBgFII0MOraQRHhvdg8rLA==' corr_id='85d59ebf-a405-49ad-9fd1-0b19b50ea9c9'
		net.ooici.siamci.impl.gpb.SiamCiServerGpb._run(){91} -  [x]     contentType= 'application/octet-stream'
		net.ooici.siamci.impl.gpb.SiamCiServerGpb._showMessage(){138} -  [x] Command received:
		    class net.ooici.play.instr.InstrumentDefs$Command
		    | command: "hiCmd"
		    | args {
		    |   channel: "ch1"
		    |   parameter: "pr1"
		    | }
		    | args {
		    |   channel: "ch2"
		    |   parameter: "pr2"
		    | }
		net.ooici.siamci.impl.gpb.SiamCiServerGpb._showMessage(){138} -  [x] Response replied:
		    class net.ooici.play.instr.InstrumentDefs$SuccessFail
		    | result: ERROR
		    | item {
		    |   type: STR
		    |   str: "Command \'hiCmd\' not implemented"
		    | }
		
	- A simple client:
		$ python src/main/python/play/pika/gpb_send_rpc.py 
		[INFO     2011-02-26 23:17:56,849  #36891] Sending command WITH CORR ID: 85d59ebf-a405-49ad-9fd1-0b19b50ea9c9
		[INFO     2011-02-26 23:17:56,850  #36891] Command sent:
		    <class 'net.ooici.play.instr.instrument_defs_pb2.Command'>
		    | command: "hiCmd"
		    | args {
		    |   channel: "ch1"
		    |   parameter: "pr1"
		    | }
		    | args {
		    |   channel: "ch2"
		    |   parameter: "pr2"
		    | }
		    | 
		[INFO     2011-02-26 23:17:56,853  #36891] correlation_id --> None
		[INFO     2011-02-26 23:17:56,854  #36891] Command received:
		    <class 'net.ooici.play.instr.instrument_defs_pb2.Command'>
		    | args {
		    |   parameter: "Command \'hiCmd\' not implemented"
		    | }
		    
	- with the server running, run the test on ioncore-python:
		(py_buildout)carueda:ioncore-python carueda$ trial ion/agents/instrumentagents/test/test_SiamCi.py
		...
		ion.agents.instrumentagents.test.test_SiamCi
		  TestSiamCi
		    test_ping ... ping response:
		    <class 'net.ooici.play.instr.instrument_defs_pb2.SuccessFail'>
		    | result: OK
		    | 
		                                                         [OK]
		
		-------------------------------------------------------------------------------
		Ran 1 tests in 0.731s
		
		PASSED (successes=1)
		 	
	
	
2011-02-24
	- project now hosted at http://gitorious.org/siamci
	- made hard links to Siam_driver.py and test_Siam.py to facilitate version control for the moment.
	
	- Created profiles in the pom to facilitate tests from the command line, and updated README.
	
2011-02-23
	- added src/main/python/ion/agents/instrumentagents/ directory to keep a copy of:
		Siam_driver.py
		test/test_Siam.py
	  from my local image of ioncore-python, while these elements get pushed to an appropriate OOICI repo.
	  
	- Updated dependencies according to recent updates in ion-object-definitions and ioncore-java
	
	- Initial structure of interfaces (ISiamCiFactory, ISiamCiAdapter) and
	  preliminary implementation. 
	  
	- The overall implementation idea is as follows:
		- The SIAM-CI adapter launches a process to dispatch messages received on a certain queue 
		  (by default called SIAM-CI).
		- IonMock: a simple program that sends a message to the adapter and displays the response.
		  This is while the corresponding functionality is enabled on the python side.
		  
	- Test:
	
		1- have rabbitmq running on localhost
		
		2- launch SiamCiMain
			net.ooici.siamci.impl.SiamCiProcess.<init>(){35} - Creating SiamCiProcess
			Opened channel on host localhost, port 5672
			Declared queue amq.gen-ObUk6ROJeWxx4EuS3vsbzg==
			Bound queue amq.gen-ObUk6ROJeWxx4EuS3vsbzg== to exchange magnet.topic with binding key 375a55fb-56e8-4bed-b874-2b19d06c2fb0.1
			Spawned process 375a55fb-56e8-4bed-b874-2b19d06c2fb0.1
			net.ooici.siamci.impl.SiamCiAdapterImpl.start(){28} - starting process
			net.ooici.siamci.impl.SiamCiProcess.run(){44} - Running SiamCiProcess
			net.ooici.siamci.impl.SiamCiProcess._run(){62} - 
			===================================================================
			Waiting for message ...
					
		3- Run IonMock  -- 
		  Lots of lines including:
			net.ooici.siamci.ion.IonMock.testSendReceive(){41} - 
			>>>>>>>>>>>>>>>>>Test Send/Receive<<<<<<<<<<<<<<<<<
			...			
			============== Object ==============
			command: "get"
			args {
			  channel: "ch1"
			  parameter: "foo"
			}
			====================================
			
			...			
			net.ooici.siamci.ion.IonMock.testSendReceive(){48} - 
			******Prepare MsgBrokerClient******
			Opened channel on host localhost, port 5672
			Declared queue amq.gen-LaiEgQzLZjbebRQOuQOPwg==
			Bound queue amq.gen-LaiEgQzLZjbebRQOuQOPwg== to exchange magnet.topic with binding key dfa2afb3-3aef-4e62-8229-fb57e0a0f49b.1
			Spawned process dfa2afb3-3aef-4e62-8229-fb57e0a0f49b.1
			net.ooici.siamci.ion.IonMock.testSendReceive(){56} - 
			******RPC Send******
			Sent message to exchange magnet.topic with routing key testing.siam-ci, msglen 363
			set encoding to: application/ion-jsond
			Message received on queue amq.gen-LaiEgQzLZjbebRQOuQOPwg==, msglen 400
			net.ooici.siamci.ion.IonMock.testSendReceive(){61} - 
			******Unpack Message******
			net.ooici.siamci.ion.IonMock.testSendReceive(){63} -  reply.getContent class = class java.lang.String
			net.ooici.siamci.ion.IonMock.testSendReceive(){65} - !!!!!!!! content is String -- using getBytes  !!!!!
			...		
			
		 While SiamCiMain outputs:
			set encoding to: ION R1 GPB
			Message received on queue SIAM-CI, msglen 363
			net.ooici.siamci.impl.SiamCiProcess._run(){72} - headers: {sender=dfa2afb3-3aef-4e62-8229-fb57e0a0f49b.1, receiver=testing.siam-ci, op=respond, conv-id=#0, encoding=ION R1 GPB, reply-to=dfa2afb3-3aef-4e62-8229-fb57e0a0f49b.1, accept-encoding=application/ion-jsond, conv-seq=1}
			net.ooici.siamci.impl.SiamCiProcess._run(){81} - receiver = testing.siam-ci    reply-to: dfa2afb3-3aef-4e62-8229-fb57e0a0f49b.1
			Sent message to exchange magnet.topic with routing key dfa2afb3-3aef-4e62-8229-fb57e0a0f49b.1, msglen 400
			net.ooici.siamci.impl.SiamCiProcess._run(){62} - 
			===================================================================
			Waiting for message ...
		 	
		
		
2011-02-21
	- various updates according to newest images of ion-object-definitions and ioncore-java.
	- etc/build.xml: "install" macro
	- ion.example: EchoClientTest and IonSimpleEcho: a simple test of communication of messages
	  related with instruments, which I added to my fork carueda/ion-object-definitions
	
2011-02-09
	- initial preparations for using maven and setting up dependencies on incore-java and
	  SIAM libraries. Initial test with emulating SIAM's listPort utility OK.
	- I'm hosting this project on a personal SVN repository for the moment.