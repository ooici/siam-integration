SIAM_CI Integration Prototype change log
Carlos Rueda - MBARI

2011-05-09
		test_005_get_instrument_params_all ...                                 [OK]
	
2011-05-08
	- Continuing update of SiamInstrumentDriver:
	  TestSiamInstrumentDriver
	    test_001_initialize ...                                                [OK]
	    test_002_configure ...                                                 [OK]
	    test_003_connect ...                                                   [OK]
	    test_004_get_status ...                                                [OK]
	
2011-05-06
	- Continued making adjustments on the python side to use the recent updates to 
	  instrument agent and instrument driver in ioncore-python. Now with the just
	  released version 0.4.10 and also against 'develop.' After struggling a bit with
	  some of the most basic tests I discovered that the InstrumentDriverClient.initialize 
	  operation was missing the @defer.inlineCallbacks decorator! I pushed the fix to 
	  develop and for convenience also did the fix directly in my local 0.4.10 egg.
	  
	  Pushed many adjustments and all tests are passing: PASSED (skips=1, successes=24)
	
2011-05-04
	Incorporating instrument agent in the tests
	
	
2011-05-03
	Incorporating instrument agent in the tests:
		- using latest 'develop' branch image of ioncore-pyhon (new elements
		  in the instrument_driver and instrument_agent to be in upcoming
		  release 0.4.9)
		- adjustments in siam_driver.py
		- New test_siam_agent.py (based on test_SBE37_agent.py). Tests are skipped
		  if the new ioncore-python elements cannot be imported.
		
		Note: the 'configure' operation is the one in which the
		SiamCiProxy would instantiated -- To be done.
	  

2011-05-02
	- Maven related adjustments to simplify build upon a fresh checkout:
		- now using MBARI maven repo for some artifacts (see etc/maven/README.txt):
			- SIAM jar
			- test instrument jar
			- DataTurbine RBNB jar
		  NOTE: these artifacts are under a special groupId intended for "interim" 
		  artifacts (not official releases). In particular, the SIAM jar is the
		  one I've been using during my SIAM-CI prototype development; it is not
		  any official SIAM release.
		  
		- msgpack: now using http://msgpack.org/maven2 repository (instead of 
		  grabbing and installing OOICI's release). Note, use the version used
		  by ioncore-java (currently msgpack 0.3).
		  
		- etc/build.xml moved to etc/maven/build.xml: now, it simply downloads the 
		  ionproto and ioncore-java libraries from OOI and installs them in the 
		  local maven repo. 
		
		
2011-04-30
	- re-enabled the SiamCiReceiverTest upon the update to use buildout
	
	- code clean-up: removed old request dispatcher mechanism based on direct
	  manipulation of google protocol buffers (which was implemented prior to
	  properly enable the use of the ION messaging APIs for this purpose):
	  	net.ooici.siamci.IRequestDispatcher
	  	net.ooici.siamci.impl.RequestDispatcher
	  	net.ooici.siamci.impl.gpb.SiamCiAdapterGpb
	  	net.ooici.siamci.impl.gpb.SiamCiServerGpb
	  	net.ooici.siamci.impl.gpb.SiamCiServerGpb_RpcServer
	  	
	 - preparation for start/stop data acquisition
	
2011-04-29
	- pushed project to https://github.com/ooici/siam-integration
		$ git remote rename origin gitorious
		$ git remote add ooici git@github.com:ooici/siam-integration.git
		$ git push -u ooici master
		
		
2011-04-24
	- Removed src/main/python/* including checked in code that is now under python/ and other preliminary
	  code 
	
2011-04-23
	- removed src/main/gpb/net/ooici/play/instr_driver_interface.proto: already at ion-object-definitions: 
	  https://github.com/ooici/ion-object-definitions/blob/develop/net/ooici/play/instr_driver_interface.proto
	  
	- New subdirectory 'python' under this project's root directory to maintain the buildout-based
	  structure for the SIAM-CI python code.
	  
	  NOTE: until now I was maintaining this code under src/main/python/ just to follow
	  some conventional maven practice but actually no maven mechanisms are enabled for it at all.
	  It makes more sense to have the python side in a separate location (under this project anyway).
	  
	  Now, the buildout scheme is fully in place. (No more symlink in ioncore-python for this.) 
	  
	  Somewhat following the ion-integration project, the new python/ has:
	  	README.txt
	  	LICENSE.txt
	  	bootstrap.py
	  	buildout.cfg
	  	setup.py
	  	MANIFEST.in
	  	res/...
	  	src/...
	  	
	  Note about src/: 
		I decided to move the base package "ion.siamci" to simply "siamci" because "ion.siamci"
		would not be found by any of the generated buildout scripts, the reason being (apparently) that
		the "ion" package in ioncore-python would take precedence thus hidding "ion.siamci" here.
	  
	  Note about res/:
	  	This basically contains a copy of corresponding apps/, logging/, and config/ from ioncore-python.
	  	TODO: How are the res/... resources supposed to be handled in general in ioncore-python-dependent
	  	      applications?  The copied stuff isworking fine now, but this need to be revisited!
	  	
		  
	  TODO:  remove src/main/python/
		 

2011-04-22
	- Java-python communication fixed with latest ioncore-python (as of today ~9am)!
	  All tests (including async ones) PASSING.
	  Solution: include header "performative" with value "inform_result" in 
	  SiamCiServerIonMsg._sendReply (thanks Chris M. for the hint), instead of
	  using the default "request" value given by IonSendMessage.
	  
	  NOTE about SiamCiServerIonMsg.publish: at the moment the sendMessage here should NOT 
	  indicate "inform_result" because in my current implementation the "listener" of such 
	  mensaje is SiamCiReceiverService, that is, a ServiceProcess, so the message is actually
	  a "request" (and this is already the default value for "performative" in IonSendMessage).
	  A TODO is that SiamCiReceiverService should probably be a Receiver.
	  
	  
	- siam_driver.py: added explicit get_status to the client to override the method in the 
	  superclass because that method expects to work with python types (list, tuple).
      In the current SIAM-CI, we work with the GPBs directly.
      
      
    - resource_registry_beta is now resource_registry (according to David's email today). 
	
	  
	
2011-04-20

	- pushed change to MsgBrokerClient (and a couple of other ioncore-java sources) to replace 
	  system.out.println to log.debug and e.printstacktrace to log.error as agreed with Chris Mueller.
	     https://github.com/ooici/ioncore-java/commit/15cb59369319f9586eea493112682b8f098aaa02
	- updated my local ioncore-java library and corresp. dependency in this project
	- with this update, removed redirection of stdout in SiamCiServerIonMsg
	
	- some javadoc about event management (net.ooici.siamci.event.EventMan)
	- added reason for stopping a data notifier. With the test_siamci_data_async.py test, the siam-ci output 
	  looks like the following (note the reason message at the end):
		04-20-2011 11:10:35,370 [SiamCiMain        ] INFO  net.ooici.siamci.SiamCiMain - Parameters: siamHost='localhost', broker='localhost:5672', queueName='SIAM-CI', exchangeName='magnet.topic'
		04-20-2011 11:10:35,372 [SiamCiMain        ] INFO  net.ooici.siamci.SiamCiMain - Listing instruments in the SIAM node:
		04-20-2011 11:10:35,378 [SiamCiMain        ] WARN  siam.PortLister - UnmarshalException with device by id '1151'. Is the instrument jar in the classpath?
		04-20-2011 11:10:35,390 [SiamCiMain        ] INFO  net.ooici.siamci.SiamCiMain -  * port='Foo' device='1151' service='Dummy'
		04-20-2011 11:10:35,390 [SiamCiMain        ] INFO  net.ooici.siamci.SiamCiMain -  * port='testPort' device='1235' service='TEstSiamInstrument'
		04-20-2011 11:10:35,390 [SiamCiMain        ] INFO  net.ooici.siamci.SiamCiMain - Starting SIAM-CI adapter. SIAM node host: localhost
		04-20-2011 11:10:35,533 [SiamCiServerIonMsg] INFO  net.ooici.siamci.impl.ionmsg.SiamCiServerIonMsg - Running SiamCiServerIonMsg (broker='localhost:5672', queue='SIAM-CI', exchange='magnet.topic')
		04-20-2011 11:10:35,535 [SiamCiServerIonMsg] INFO  net.ooici.siamci.impl.ionmsg.SiamCiServerIonMsg - [0] Waiting for request ...
		04-20-2011 11:11:00,250 [SiamCiServerIonMsg] INFO  net.ooici.siamci.impl.ionmsg.SiamCiServerIonMsg - [0] Request <execute_StartAcquisition> received from 'carueda.shore.mbari.org.6323.1b' conv-id='#3'
		04-20-2011 11:11:00,251 [SiamCiServerIonMsg] INFO  net.ooici.siamci.impl.ionmsg.SiamCiServerIonMsg - [1] Waiting for request ...
		04-20-2011 11:11:00,251 [pool-2-thread-1   ] INFO  net.ooici.siamci.impl.ionmsg.SiamCiServerIonMsg - [0] Command with publish stream name: 'siamci.siamci_receiver_test_async'
		04-20-2011 11:11:00,257 [pool-2-thread-1   ] INFO  net.ooici.siamci.impl.reqproc.StartAcquisitionRequestProcessor - [0] rbnbHost='localhost:3333' fullChannelName='TEstSiamInstrument-1235/val'
		04-20-2011 11:11:00,273 [pool-2-thread-1   ] INFO  net.ooici.siamci.impl.data.DataManagers - Returning dataManager (net.ooici.siamci.impl.data.DataManager)
		04-20-2011 11:11:00,394 [pool-2-thread-1   ] INFO  net.ooici.siamci.impl.ionmsg.SiamCiServerIonMsg - [0] Reply sent to 'carueda.shore.mbari.org.6323.1b' conv-id:'#3' user-id:'ANONYMOUS' expiry:0
		
		04-20-2011 11:11:04,179 [pool-3-thread-1   ] INFO  net.ooici.siamci.impl.ionmsg.SiamCiServerIonMsg - [0] Publish message sent. publishId='execute_StartAcquisition;port=testPort;channel=val' to queue='siamci.siamci_receiver_test_async'
		04-20-2011 11:11:14,162 [pool-3-thread-1   ] INFO  net.ooici.siamci.impl.ionmsg.SiamCiServerIonMsg - [0] Publish message sent. publishId='execute_StartAcquisition;port=testPort;channel=val' to queue='siamci.siamci_receiver_test_async'
		04-20-2011 11:11:16,163 [pool-3-thread-1   ] INFO  net.ooici.siamci.impl.data.DataManager - DataNotifier completed. key='0|TEstSiamInstrument-1235/val|execute_StartAcquisition;port=testPort;channel=val|siamci.siamci_receiver_test_async' 
		                       Reason: No delivery possible to rountingKey='siamci.siamci_receiver_test_async'
	
	
	- Refactoring to simplify access to common elements via a singleton SiamCi class, in particular
	  there is a unique IPublisher per adapter service (and well, there is only one such service at
	  the moment).
	  
	- StartAcquisitionRequestProcessor renamed to StartOrStopAcquisitionRequestProcessor because of
	  the common logic. 
	  "stop acquisition" implemented but not tested yet.
	  
	  
	
2011-04-19
	- In ioncore-java, pushed new method: 
		sendMessage(IonMessage msg, boolean mandatory, boolean immediate) throws IOException
	  to MsgBrokerClient:
	  	https://github.com/ooici/ioncore-java/commit/0ce5ecea433c32a0aa266b04ed4043401e9bf523
	  The new method is used in SiamCiServerIonMsg.publish:
	  NOTE: I'm setting both flags (mandatory and immediate) as true, but probably not both are 
	  necessary. See various relevant items in the http://www.rabbitmq.com/faq.html,
	  for example http://www.rabbitmq.com/faq.html#immediate-flat-routing
	  
	  
	- I googled for some good in-jvm event bus library but it was not quickly clear what solution
	  to use (EventBus.org seems to Swing oriented and the confluence pages were down; 
	  SimpleEventBus looked dated). But then I found mycila-event which turns out very interesting:
	        http://code.google.com/p/mycila/wiki/MycilaEvent 
	  (I found it by reading a blog by TestNG's creator: http://java.dzone.com/articles/local-message-bus).
	  
	- New event package and initial support using mycila-event, see EventMan and EventTest.
	
	- With these new elements the program is now able to stop the DataNotifier's associated with
	  the routingKey that is reported by RabittMQ via the ReturnListener associated with the
	  channel in MsgBrokerClient.  Tests are successful.
	  	
	  	$ mvn exec:java -Psiam-ci
	  	
	    $ SIAM_CI=- bin/trial ion/siamci/test/test_siamci_data_async.py
	    
	    The siam-ci output looks:
		04-19-2011 16:56:51,440 [SiamCiServerIonMsg] INFO  net.ooici.siamci.impl.ionmsg.SiamCiServerIonMsg - [0] Request <execute_StartAcquisition> received from 'carueda.shore.mbari.org.4749.1b' conv-id='#3'
		04-19-2011 16:56:51,441 [SiamCiServerIonMsg] INFO  net.ooici.siamci.impl.ionmsg.SiamCiServerIonMsg - [1] Waiting for request ...
		04-19-2011 16:56:51,441 [pool-2-thread-1   ] INFO  net.ooici.siamci.impl.ionmsg.SiamCiServerIonMsg - [0] Command with publish stream name: 'siamci.siamci_receiver_test_async'
		04-19-2011 16:56:51,448 [pool-2-thread-1   ] INFO  net.ooici.siamci.impl.reqproc.StartAcquisitionRequestProcessor - [0] rbnbHost='localhost:3333' fullChannelName='TEstSiamInstrument-1235/val'
		04-19-2011 16:56:51,466 [pool-2-thread-1   ] INFO  net.ooici.siamci.impl.data.DataManager - instance created: localhost:3333|testPort
		04-19-2011 16:56:51,466 [pool-2-thread-1   ] INFO  net.ooici.siamci.impl.data.DataManagers - Returning dataManager (net.ooici.siamci.impl.data.DataManager)
		04-19-2011 16:56:51,584 [pool-2-thread-1   ] INFO  net.ooici.siamci.impl.data.DataManager - DataNotifier created: key='0|TEstSiamInstrument-1235/val|execute_StartAcquisition;port=testPort;channel=val|siamci.siamci_receiver_test_async'
		04-19-2011 16:56:51,585 [pool-2-thread-1   ] INFO  net.ooici.siamci.impl.data.DataManager - DataNotifier started: key='0|TEstSiamInstrument-1235/val|execute_StartAcquisition;port=testPort;channel=val|siamci.siamci_receiver_test_async'
		04-19-2011 16:56:51,586 [pool-3-thread-1   ] INFO  net.ooici.siamci.impl.data.DataNotifier - [0] {TEstSiamInstrument-1235/val} Waiting for data ...
		04-19-2011 16:56:51,595 [pool-2-thread-1   ] INFO  net.ooici.siamci.impl.ionmsg.SiamCiServerIonMsg - [0] Reply sent to 'carueda.shore.mbari.org.4749.1b' conv-id:'#3' user-id:'ANONYMOUS' expiry:0
		
		04-19-2011 16:56:53,741 [pool-3-thread-1   ] INFO  net.ooici.siamci.impl.data.DataNotifier - [0] {TEstSiamInstrument-1235/val} _publishData: 'TEstSiamInstrument-1235/val' = 0.71238620459177
		04-19-2011 16:56:53,742 [pool-3-thread-1   ] DEBUG ion.core.messaging.MsgBrokerClient - Sent message to exchange magnet.topic with routing key siamci.siamci_receiver_test_async, msglen 446, mandatory=true immediate=true
		04-19-2011 16:56:53,742 [pool-3-thread-1   ] INFO  net.ooici.siamci.impl.ionmsg.SiamCiServerIonMsg - [0] Publish message sent. publishId='execute_StartAcquisition;port=testPort;channel=val' to queue='siamci.siamci_receiver_test_async'
		04-19-2011 16:56:53,743 [pool-3-thread-1   ] INFO  net.ooici.siamci.impl.data.DataNotifier - [0] {TEstSiamInstrument-1235/val} Waiting for data ...
		
		
		04-19-2011 16:57:03,731 [pool-3-thread-1   ] INFO  net.ooici.siamci.impl.data.DataNotifier - [0] {TEstSiamInstrument-1235/val} _publishData: 'TEstSiamInstrument-1235/val' = 0.1520382002169598
		04-19-2011 16:57:03,732 [pool-3-thread-1   ] DEBUG ion.core.messaging.MsgBrokerClient - Sent message to exchange magnet.topic with routing key siamci.siamci_receiver_test_async, msglen 448, mandatory=true immediate=true
		04-19-2011 16:57:03,732 [pool-3-thread-1   ] INFO  net.ooici.siamci.impl.ionmsg.SiamCiServerIonMsg - [0] Publish message sent. publishId='execute_StartAcquisition;port=testPort;channel=val' to queue='siamci.siamci_receiver_test_async'
		04-19-2011 16:57:03,732 [pool-3-thread-1   ] INFO  net.ooici.siamci.impl.data.DataNotifier - [0] {TEstSiamInstrument-1235/val} Waiting for data ...
		04-19-2011 16:57:03,744 [AMQP Connection localhost:5672] INFO  net.ooici.siamci.impl.data.DataManager - Got ReturnEvent: routingKey='siamci.siamci_receiver_test_async'
		04-19-2011 16:57:03,744 [AMQP Connection localhost:5672] INFO  net.ooici.siamci.impl.data.DataManager - XXX stopping notifier key='0|TEstSiamInstrument-1235/val|execute_StartAcquisition;port=testPort;channel=val|siamci.siamci_receiver_test_async'
		
		04-19-2011 16:57:05,733 [pool-3-thread-1   ] INFO  net.ooici.siamci.impl.data.DataManager - Notifier completed. Removing key='0|TEstSiamInstrument-1235/val|execute_StartAcquisition;port=testPort;channel=val|siamci.siamci_receiver_test_async'
	    
	    
	  
2011-04-18
	- Some more preparation for data reception and notification to ION, with preliminary
	  test_siamci_data_async.py completing ok.
	- I reduced the snooze in the test instrument from 20 to 7 seconds to faciliate testing
	  (less likehood of timeout).
	  
	- TODO re. data notification: at the moment DataNotifier sends ONLY one notification and
	  terminates (this is mainly to let the test_siamci_data_async.py complete). In general
	  of course the notification should continue until indicated otherwise (or because
	  of some error, etc.).  In this general case, it would be convenient to detect 
	  the situation where there is no receptor for such data notifications so the notifier
	  can decide to stop running.
	  
	  
	- In ioncore-java, I just pushed the following change: in MsgBrokerClient, make
	  mDefaultChannel protected to facilitate some added functionality, for example, detection of 
	  undelivered/unroutable messages:
	    https://github.com/ooici/ioncore-java/commit/262ae24ffed5d61c32f78af09e78a03fe4b88737
	    
	  While I update the dependency to the new release of ioncore-java including this change, 
	  I made a quick test of registering a ReturnListener to the channel using a copy of the 
	  whole MsgBrokerClient class and also indicating the immediate and mandatory flags in 
	  the sendMessage method (at least one of these flags must be true for the return notification
	  to work).
	  
	    
	
2011-04-13b
	- some preparations for data management, ie., for dispatching the reception of
	  data from the RBNB channels associated with SIAM instruments to the ION.
	  Varios interfaces and preliminary implementation done but functionality not
	  completed/enabled yet.
	  
	  
2011-04-13
	- updated code comments in various places to better clarify current status, in particular
	  in the SiamInstrumentDriver class (python).
	  
	- SiamCiServerIonMsg: The main part of the dispatch of a request is now launched in a 
	  different thread (using an Executors.newCachedThreadPool()).
	- Included request ID to better identify the specific request among the various 
	  possible concurrent log messages.
	- The output from the adapter program looks now as follows 
	  (with ``SIAM_CI=-  bin/trial ion/siamci/test/test_siamci_async.py'' running on the python side):
		$ mvn exec:java -Dsiam-ci 
		04-13-2011 16:17:08,744 [SiamCiMain        ] INFO  net.ooici.siamci.SiamCiMain - Listing instruments in the SIAM node:
		04-13-2011 16:17:08,749 [SiamCiMain        ] WARN  siam.PortLister - UnmarshalException with device by id '1151'. Is the instrument jar in the classpath?
		04-13-2011 16:17:08,760 [SiamCiMain        ] INFO  net.ooici.siamci.SiamCiMain -  * port='Foo' device='1151' service='Dummy'
		04-13-2011 16:17:08,760 [SiamCiMain        ] INFO  net.ooici.siamci.SiamCiMain -  * port='testPort' device='1235' service='TEstSiamInstrument'
		04-13-2011 16:17:08,760 [SiamCiMain        ] INFO  net.ooici.siamci.SiamCiMain - Starting SIAM-CI adapter. SIAM node host: localhost
		04-13-2011 16:17:08,868 [SiamCiServerIonMsg] INFO  net.ooici.siamci.impl.ionmsg.SiamCiServerIonMsg - Running SiamCiServerIonMsg (broker='localhost:5672', queue='SIAM-CI', exchange='magnet.topic')
		04-13-2011 16:17:08,868 [SiamCiServerIonMsg] INFO  net.ooici.siamci.impl.ionmsg.SiamCiServerIonMsg - [0] Waiting for request ...
		04-13-2011 16:17:22,847 [SiamCiServerIonMsg] INFO  net.ooici.siamci.impl.ionmsg.SiamCiServerIonMsg - [0] Request <fetch_params> received from 'carueda.shore.mbari.org.76526.1b' conv-id='#3'
		04-13-2011 16:17:22,848 [SiamCiServerIonMsg] INFO  net.ooici.siamci.impl.ionmsg.SiamCiServerIonMsg - [1] Waiting for request ...
		04-13-2011 16:17:22,848 [pool-2-thread-1   ] INFO  net.ooici.siamci.impl.ionmsg.SiamCiServerIonMsg - [0] Command with publish stream name: 'siamci.siamci_receiver_test_async'
		04-13-2011 16:17:22,856 [pool-2-thread-1   ] INFO  net.ooici.siamci.impl.ionmsg.SiamCiServerIonMsg - [0] Reply sent to 'carueda.shore.mbari.org.76526.1b' conv-id:'#3' user-id:'ANONYMOUS' expiry:0
		
		04-13-2011 16:17:22,858 [pool-1-thread-1   ] INFO  net.ooici.siamci.impl.ionmsg.SiamCiServerIonMsg - [0] Publish message sent. publishId='fetch_params;port=testPort' to queue='siamci.siamci_receiver_test_async'
		04-13-2011 16:17:23,089 [SiamCiServerIonMsg] INFO  net.ooici.siamci.impl.ionmsg.SiamCiServerIonMsg - [1] Request <fetch_params> received from 'carueda.shore.mbari.org.76526.8b' conv-id='#11'
		04-13-2011 16:17:23,090 [SiamCiServerIonMsg] INFO  net.ooici.siamci.impl.ionmsg.SiamCiServerIonMsg - [2] Waiting for request ...
		04-13-2011 16:17:23,090 [pool-2-thread-1   ] INFO  net.ooici.siamci.impl.ionmsg.SiamCiServerIonMsg - [1] Command with publish stream name: 'siamci.siamci_receiver_test_async'
		04-13-2011 16:17:23,091 [pool-2-thread-1   ] INFO  net.ooici.siamci.impl.ionmsg.SiamCiServerIonMsg - [1] Reply sent to 'carueda.shore.mbari.org.76526.8b' conv-id:'#11' user-id:'ANONYMOUS' expiry:0
		
		04-13-2011 16:17:23,095 [pool-1-thread-1   ] INFO  net.ooici.siamci.impl.ionmsg.SiamCiServerIonMsg - [1] Publish message sent. publishId='fetch_params;port=testPort' to queue='siamci.siamci_receiver_test_async'
		04-13-2011 16:17:23,317 [SiamCiServerIonMsg] INFO  net.ooici.siamci.impl.ionmsg.SiamCiServerIonMsg - [2] Request <fetch_params> received from 'carueda.shore.mbari.org.76526.15b' conv-id='#19'
	    ...
	- these adjustments were mainly made as part of the testing with the DataTurbine mechanism to
	  get data from the instrument, see below.    
	
	  
	- RbnbSinkProgram: new test program to retrieve data from a SIAM instrument enabled with the
	  "publisherHost" property. (This property makes the SIAM publish data to the corresponding
	  RBNB server indicated by the property, for example, "localhost:3333".)
	  
	  See below for how to run the program.
	  
	  **NOTE**  I'm noticing that the set parameters operation seems even more likely to time out 
	  when the test instrument is enabled with the publisherHost property!  
	  TODO: Consult the SIAM experts ;)
	   
	  
	  RbnbSinkProgram can be run from maven:
		$ mvn exec:java -Prbnb-sink -Dexec.args=--help
		RbnbSinkProgram usage:
		Option                                  Description                            
		------                                  -----------                            
		-?, --help                              print help message                     
		--channels <channels>                   Channels separated by comma (default:  
		                                          sequenceNumber,val)                  
		--client <host>                         Client name (default:                  
		                                          TEstSiamInstrument-1235)             
		--host <host>                           RBNB server host (default: localhost)  
		--port <port>                           RBNB server port (default: 3333)
		
		TestSiamInstrument1 adjusted to generate a couple of numeric channels.
		
		A complete test goes as follows:
		
		Under siam2:
			# set the property to the instrument:
			$ utils/setProperty localhost testPort publisherHost=localhost:3333
			# re-start the instrument:
			$ utils/restartPort localhost testPort
			# that's it.
			
			Note: The property can be associated at the creation of the JAR as follows:
			$ mksiamjar -classdir siam/test/devices/device1 -base classes/ \
			            -service siam.test.devices.device1.TestSiamInstrument1 \
			            -jar ports/TestSiamInstrument-1235.jar \
			            -id 1235 \
			            -mnem "TEstSiamInstrument"  \
			            'publisherHost=localhost:3333'	
			
			
		Under siamci:
			$ mvn exec:java -Prbnb-sink    
			04-13-2011 12:38:17,834 [main              ] INFO  test.siam.utils.RbnbSinkProgram - Connecting to localhost:3333 (clientName='TEstSiamInstrument-1235') ...
			04-13-2011 12:38:17,938 [main              ] INFO  test.siam.utils.RbnbSinkProgram - Subscribing to channels [sequenceNumber, val]
			04-13-2011 12:38:17,943 [RbnbSinkProgram   ] INFO  test.siam.utils.RbnbSinkProgram - Waiting for data ...
			04-13-2011 12:38:31,335 [RbnbSinkProgram   ] INFO  test.siam.utils.RbnbSinkProgram - Fetched 2 channels
			04-13-2011 12:38:31,335 [RbnbSinkProgram   ] INFO  test.siam.utils.RbnbSinkProgram -   'TEstSiamInstrument-1235/sequenceNumber' (type=8)  -> 32.0
			04-13-2011 12:38:31,344 [RbnbSinkProgram   ] INFO  test.siam.utils.RbnbSinkProgram -   'TEstSiamInstrument-1235/val' (type=8)  -> 0.7439054166900111
			04-13-2011 12:38:31,345 [RbnbSinkProgram   ] INFO  test.siam.utils.RbnbSinkProgram - Waiting for data ...
			04-13-2011 12:38:51,329 [RbnbSinkProgram   ] INFO  test.siam.utils.RbnbSinkProgram - Fetched 2 channels
			04-13-2011 12:38:51,329 [RbnbSinkProgram   ] INFO  test.siam.utils.RbnbSinkProgram -   'TEstSiamInstrument-1235/sequenceNumber' (type=8)  -> 33.0
			04-13-2011 12:38:51,329 [RbnbSinkProgram   ] INFO  test.siam.utils.RbnbSinkProgram -   'TEstSiamInstrument-1235/val' (type=8)  -> 0.7614810628599319
			04-13-2011 12:38:51,329 [RbnbSinkProgram   ] INFO  test.siam.utils.RbnbSinkProgram - Waiting for data ...
	
	
2011-04-12
	- preparing to retrieve data from the test instrument:
		- included rbnb.jar in project (see etc/build.xml and pom.xml)
		- preliminary quick test with a Sink client to check notification from the RBNB server.
		
2011-04-12
	- ion-object-definitions: pushed addition of publish_stream field in Command.
	- ioncore-java: pushed dependency on ionproto version 0.3.16-pl5 and rebuilt ioncore-java
	- siamci: etc/buid.xml and pom.xml updated with the new ionproto version
	- siamci succesfully rebuilt:
	  	$ ant -f etc/build.xml install-ion-object-definitions install-ioncore-java
	  	$ mvn clean compile
	  	
	  TODO: do similar upgrade with ioncore-python. I already started looking into this
	  but unfortunately tests are failing because of recent changes in ioncore-python.
	  Basically, when a reply to a request is sent from the SIAM-CI adapter, the python 
	  side is now complaining about receiving an unexpected message:
	  	...
	  	2011-04-12 12:29:00.829 [conversation   :171] ERROR:Conversation ERROR: UNEXPECTED MSG
	  (I did this test under a temporary ioncore-python cloned today.)
	  Email sent to MM about this issue.
	  
	  I updated my current ioncore-python image with a reference to ionproto 0.3.16-pl5 to be
	  able to use the new Command.publish_stream field in python:
	  		updated development.cfg with:
	  				[versions]
					ionproto=0.3.16-pl5
	  		then:
	  			$ bin/mypython bootstrap.py
	  			$ ant clean
	  			$ bin/buildout -c development.cfg
	  Now both the python and java sides use the new field Command.publish_stream.
	  			
	  
	- Adjusted test_receiver_service.py so it runs fine with both my current and latest 
	  ioncore-python images. Basically, instead of:
	  		yield bootstrap.bootstrap(ion_messaging, services)
	  now it does
	  		yield self._spawn_processes(services)
	  		
	 - Did same adjustment for test_siamci_async.py because it also works fine with my current 
	   image although it is failing with latest image (but is a preparation for later upgrade). 
	  		
	  		
	- receiver service's getExpected operation now does a more appropriate handling of the
	  given timeout: in a loop while there are still pending id's it sleeps for a fraction
	  and recomputes the pending list; all of this for a maximum of the given timeout (approx.) 
	   
	
2011-04-11
	- Code clean-up and doc. 
	- Type/operation renamings for concept: from "request processor" to "request dispatcher"
	- Refactoring for better dispatch of requests (strategy pattern in essence):
		- new interfaces IRequestProcessors, and IRequestProcessor, and corresponding
		  implementation classes, RequestProcessors and the varios classes under reqproc.
		- IRequestDispatcher deprecated (in fact ready to be removed in a next code clean-up)
	- All operations that were implemented for the synchronous style are now enabled
	  for asynchronous notification of results as well.
	
	Some TODOS	
		- publish_id still to be assigned in a more robust way.
		- capture publish_stream explicitly in the protobuff for Command. Currently, this
		  is captured as one element in the ChannelParameterPair list, which is of course
		  inappropriate.
		- SiamCiReceiverService.op_getExpected: robust handling of timeout
	
		- **NOTE**
			In the SIAM driver (SiamInstrumentDriver class in python) the various
			responses are handled as GPBs and NOT as native python structures (like dict),
			which is currently the suggested style in the ION InstrumentDriver class.
			My current approach is that any conversion to/from python structures should be
			handled outside of the driver.  BUT all of this is to be decided when
			working on the integration with the Intrument Agent.
			
			
	- NOTE about SIAM: I'm noticing that the setPortProperties operation in SIAM sometimes
	  takes several seconds causing a timeout on the python side -- why is such operation 
	  taking too long for the fake instrument I'm using?
	  
	
2011-04-10
    - test_receiver_service.py with more complete unit tests for the receiver service.
    
    - Adjustments to test_siamci_async.py
    
    - Note that there might multiple instances of the same service in the python CC.
      In particular, there will be a receiver service instance for each SIAM-CI proxy
      instance (such that publish replies go the corresponding queue). I found out that 
	  to name a service properly, the 'name' parameter is not sufficient; the 
	  'servicename' property should be included. For example, test_siamci_async.py does this:
		  	receiver_service_name = 'siamci_receiver_test_async'
		  	...
	        services = [
	            {'name':receiver_service_name,             # <-- not enough
	             'module':'ion.siamci.receiver_service',
	             'class':'SiamCiReceiverService',
	             'spawnargs':{ 
	                 'servicename':receiver_service_name   # <-- also needed
	              }
	            }
	        ]
	        
	- Integration tests go as follows at this point:
	
	  Under siamci/:
		$ mvn clean compile exec:java -Dsiam-ci 
		...
		04-10-2011 21:08:37,103 [SiamCiMain        ] INFO  net.ooici.siamci.SiamCiMain - Listing instruments in the SIAM node:
		04-10-2011 21:08:37,110 [SiamCiMain        ] WARN  siam.PortLister - UnmarshalException with device by id '1151'. Is the instrument jar in the classpath?
		04-10-2011 21:08:37,123 [SiamCiMain        ] INFO  net.ooici.siamci.SiamCiMain -  * port='Foo' device='1151' service='Dummy'
		04-10-2011 21:08:37,123 [SiamCiMain        ] INFO  net.ooici.siamci.SiamCiMain -  * port='testPort' device='1235' service='TEstSiamInstrument'
		04-10-2011 21:08:37,123 [SiamCiMain        ] INFO  net.ooici.siamci.SiamCiMain - Starting SIAM-CI adapter. SIAM node host: localhost
		04-10-2011 21:08:37,232 [SiamCiServerIonMsg] INFO  net.ooici.siamci.impl.ionmsg.SiamCiServerIonMsg - Running SiamCiServerIonMsg (broker='localhost:5672', queue='SIAM-CI', exchange='magnet.topic')
		04-10-2011 21:08:37,233 [SiamCiServerIonMsg] INFO  net.ooici.siamci.impl.ionmsg.SiamCiServerIonMsg - [0] Waiting for request ...
		                
	Under ioncore-python/ (with the usual symbolic link to python stuff in siamci):
		$ SIAM_CI=-  bin/trial ion/siamci/test/
		ion.siamci.test.test_echo_service_in_java
		  JavaEchoTest
		    test_send_message_instance1 ...                                        [OK]
		    test_send_message_instance2 ...                                        [OK]
		ion.siamci.test.test_receiver_service
		  SiamCiReceiverServiceTest
		    test_expect_1 ...                                                      [OK]
		    test_expect_accept_1 ...                                               [OK]
		ion.siamci.test.test_siam
		  TestSiamInstrumentDriver
		    test_execute ...                                                  [SKIPPED]
		    test_fetch_params_all ...                                              [OK]
		    test_fetch_params_some ...                                             [OK]
		    test_fetch_set1 ...                                                    [OK]
		    test_fetch_set2 ...                                                    [OK]
		    test_get_last_sample ...                                               [OK]
		    test_get_status ...                                                    [OK]
		    test_initialize ...                                               [SKIPPED]
		    test_list_ports ...                                                    [OK]
		    test_ping ...                                                          [OK]
		ion.siamci.test.test_siamci
		  TestSiamCiAdapterProxy
		    test_fetch_params_all ...                                              [OK]
		    test_fetch_params_some ...                                             [OK]
		    test_get_last_sample ...                                               [OK]
		    test_get_status ...                                                    [OK]
		    test_list_ports ...                                                    [OK]
		    test_ping ...                                                          [OK]
		    test_set_params ...                                                    [OK]
		ion.siamci.test.test_siamci_async
		  TestSiamCiAdapterProxyAsync
		    test_get_status_async ...                                              [OK]
		
		===============================================================================
		[SKIPPED]
		Not implemented yet
		
		ion.siamci.test.test_siam.TestSiamInstrumentDriver.test_execute
		ion.siamci.test.test_siam.TestSiamInstrumentDriver.test_initialize
		-------------------------------------------------------------------------------
		Ran 22 tests in 4.313s
		
      while in siamci (note, the excpetion below is expected):
		04-10-2011 21:09:56,968 [SiamCiServerIonMsg] INFO  net.ooici.siamci.impl.ionmsg.SiamCiServerIonMsg - Request received from 'carueda.28453.1b'
		04-10-2011 21:09:57,514 [SiamCiServerIonMsg] INFO  net.ooici.siamci.impl.ionmsg.SiamCiServerIonMsg - convId received: #1
		04-10-2011 21:09:57,521 [SiamCiServerIonMsg] INFO  net.ooici.siamci.impl.ionmsg.SiamCiServerIonMsg - Reply sent to 'carueda.28453.1b' conv-id: '#1' user-id: 'ANONYMOUS' expiry: '0'
		
		04-10-2011 21:09:57,521 [SiamCiServerIonMsg] INFO  net.ooici.siamci.impl.ionmsg.SiamCiServerIonMsg - [1] Waiting for request ...
		04-10-2011 21:09:57,645 [SiamCiServerIonMsg] INFO  net.ooici.siamci.impl.ionmsg.SiamCiServerIonMsg - Request received from 'carueda.28453.6b'
		04-10-2011 21:09:57,646 [SiamCiServerIonMsg] INFO  net.ooici.siamci.impl.ionmsg.SiamCiServerIonMsg - convId received: #4
		04-10-2011 21:09:57,646 [SiamCiServerIonMsg] INFO  net.ooici.siamci.impl.ionmsg.SiamCiServerIonMsg - Reply sent to 'carueda.28453.6b' conv-id: '#4' user-id: 'ANONYMOUS' expiry: '0'
		
		04-10-2011 21:09:57,646 [SiamCiServerIonMsg] INFO  net.ooici.siamci.impl.ionmsg.SiamCiServerIonMsg - [2] Waiting for request ...
		04-10-2011 21:09:58,269 [SiamCiServerIonMsg] INFO  net.ooici.siamci.impl.ionmsg.SiamCiServerIonMsg - Request received from 'carueda.28453.32b'
		04-10-2011 21:09:58,277 [SiamCiServerIonMsg] INFO  net.ooici.siamci.impl.ionmsg.SiamCiServerIonMsg - convId received: #19
		04-10-2011 21:09:58,290 [SiamCiServerIonMsg] INFO  net.ooici.siamci.impl.ionmsg.SiamCiServerIonMsg - Reply sent to 'carueda.28453.32b' conv-id: '#19' user-id: 'ANONYMOUS' expiry: '0'
		
		04-10-2011 21:09:58,290 [SiamCiServerIonMsg] INFO  net.ooici.siamci.impl.ionmsg.SiamCiServerIonMsg - [3] Waiting for request ...
		04-10-2011 21:09:58,451 [SiamCiServerIonMsg] INFO  net.ooici.siamci.impl.ionmsg.SiamCiServerIonMsg - Request received from 'carueda.28453.39b'
		04-10-2011 21:09:58,454 [SiamCiServerIonMsg] INFO  net.ooici.siamci.impl.ionmsg.SiamCiServerIonMsg - convId received: #23
		04-10-2011 21:09:58,455 [SiamCiServerIonMsg] INFO  net.ooici.siamci.impl.ionmsg.SiamCiServerIonMsg - Reply sent to 'carueda.28453.39b' conv-id: '#23' user-id: 'ANONYMOUS' expiry: '0'
		
		04-10-2011 21:09:58,455 [SiamCiServerIonMsg] INFO  net.ooici.siamci.impl.ionmsg.SiamCiServerIonMsg - [4] Waiting for request ...
		04-10-2011 21:09:58,603 [SiamCiServerIonMsg] INFO  net.ooici.siamci.impl.ionmsg.SiamCiServerIonMsg - Request received from 'carueda.28453.46b'
		04-10-2011 21:09:58,607 [SiamCiServerIonMsg] INFO  net.ooici.siamci.impl.ionmsg.SiamCiServerIonMsg - convId received: #27
		04-10-2011 21:09:58,608 [SiamCiServerIonMsg] INFO  net.ooici.siamci.impl.ionmsg.SiamCiServerIonMsg - Reply sent to 'carueda.28453.46b' conv-id: '#27' user-id: 'ANONYMOUS' expiry: '0'
		
		04-10-2011 21:09:58,608 [SiamCiServerIonMsg] INFO  net.ooici.siamci.impl.ionmsg.SiamCiServerIonMsg - [5] Waiting for request ...
		04-10-2011 21:09:58,760 [SiamCiServerIonMsg] INFO  net.ooici.siamci.impl.ionmsg.SiamCiServerIonMsg - Request received from 'carueda.28453.53b'
		04-10-2011 21:09:58,763 [SiamCiServerIonMsg] INFO  net.ooici.siamci.impl.ionmsg.SiamCiServerIonMsg - convId received: #31
		04-10-2011 21:09:58,764 [SiamCiServerIonMsg] INFO  net.ooici.siamci.impl.ionmsg.SiamCiServerIonMsg - Reply sent to 'carueda.28453.53b' conv-id: '#31' user-id: 'ANONYMOUS' expiry: '0'
		
		04-10-2011 21:09:58,764 [SiamCiServerIonMsg] INFO  net.ooici.siamci.impl.ionmsg.SiamCiServerIonMsg - [6] Waiting for request ...
		04-10-2011 21:09:58,917 [SiamCiServerIonMsg] INFO  net.ooici.siamci.impl.ionmsg.SiamCiServerIonMsg - Request received from 'carueda.28453.60b'
		04-10-2011 21:09:58,921 [SiamCiServerIonMsg] INFO  net.ooici.siamci.impl.ionmsg.SiamCiServerIonMsg - convId received: #35
		04-10-2011 21:09:58,922 [SiamCiServerIonMsg] INFO  net.ooici.siamci.impl.ionmsg.SiamCiServerIonMsg - Reply sent to 'carueda.28453.60b' conv-id: '#35' user-id: 'ANONYMOUS' expiry: '0'
		
		04-10-2011 21:09:58,922 [SiamCiServerIonMsg] INFO  net.ooici.siamci.impl.ionmsg.SiamCiServerIonMsg - [7] Waiting for request ...
		04-10-2011 21:09:59,072 [SiamCiServerIonMsg] INFO  net.ooici.siamci.impl.ionmsg.SiamCiServerIonMsg - Request received from 'carueda.28453.67b'
		04-10-2011 21:09:59,074 [SiamCiServerIonMsg] INFO  net.ooici.siamci.impl.ionmsg.SiamCiServerIonMsg - convId received: #39
		04-10-2011 21:09:59,074 [SiamCiServerIonMsg] INFO  net.ooici.siamci.impl.ionmsg.SiamCiServerIonMsg - Reply sent to 'carueda.28453.67b' conv-id: '#39' user-id: 'ANONYMOUS' expiry: '0'
		
		04-10-2011 21:09:59,074 [SiamCiServerIonMsg] INFO  net.ooici.siamci.impl.ionmsg.SiamCiServerIonMsg - [8] Waiting for request ...
		04-10-2011 21:09:59,423 [SiamCiServerIonMsg] INFO  net.ooici.siamci.impl.ionmsg.SiamCiServerIonMsg - Request received from 'carueda.28453.81b'
		04-10-2011 21:09:59,426 [SiamCiServerIonMsg] WARN  siam.PortLister - UnmarshalException with device by id '1151'. Is the instrument jar in the classpath?
		04-10-2011 21:09:59,429 [SiamCiServerIonMsg] INFO  net.ooici.siamci.impl.ionmsg.SiamCiServerIonMsg - convId received: #45
		04-10-2011 21:09:59,430 [SiamCiServerIonMsg] INFO  net.ooici.siamci.impl.ionmsg.SiamCiServerIonMsg - Reply sent to 'carueda.28453.81b' conv-id: '#45' user-id: 'ANONYMOUS' expiry: '0'
		
		04-10-2011 21:09:59,430 [SiamCiServerIonMsg] INFO  net.ooici.siamci.impl.ionmsg.SiamCiServerIonMsg - [9] Waiting for request ...
		04-10-2011 21:09:59,581 [SiamCiServerIonMsg] INFO  net.ooici.siamci.impl.ionmsg.SiamCiServerIonMsg - Request received from 'carueda.28453.88b'
		04-10-2011 21:09:59,581 [SiamCiServerIonMsg] INFO  net.ooici.siamci.impl.ionmsg.SiamCiServerIonMsg - convId received: #49
		04-10-2011 21:09:59,582 [SiamCiServerIonMsg] INFO  net.ooici.siamci.impl.ionmsg.SiamCiServerIonMsg - Reply sent to 'carueda.28453.88b' conv-id: '#49' user-id: 'ANONYMOUS' expiry: '0'
		
		04-10-2011 21:09:59,582 [SiamCiServerIonMsg] INFO  net.ooici.siamci.impl.ionmsg.SiamCiServerIonMsg - [10] Waiting for request ...
		04-10-2011 21:09:59,719 [SiamCiServerIonMsg] INFO  net.ooici.siamci.impl.ionmsg.SiamCiServerIonMsg - Request received from 'carueda.28453.95b'
		04-10-2011 21:09:59,723 [SiamCiServerIonMsg] INFO  net.ooici.siamci.impl.ionmsg.SiamCiServerIonMsg - convId received: #52
		04-10-2011 21:09:59,724 [SiamCiServerIonMsg] INFO  net.ooici.siamci.impl.ionmsg.SiamCiServerIonMsg - Reply sent to 'carueda.28453.95b' conv-id: '#52' user-id: 'ANONYMOUS' expiry: '0'
		
		04-10-2011 21:09:59,724 [SiamCiServerIonMsg] INFO  net.ooici.siamci.impl.ionmsg.SiamCiServerIonMsg - [11] Waiting for request ...
		04-10-2011 21:09:59,860 [SiamCiServerIonMsg] INFO  net.ooici.siamci.impl.ionmsg.SiamCiServerIonMsg - Request received from 'carueda.28453.100b'
		04-10-2011 21:09:59,864 [SiamCiServerIonMsg] INFO  net.ooici.siamci.impl.ionmsg.SiamCiServerIonMsg - convId received: #55
		04-10-2011 21:09:59,864 [SiamCiServerIonMsg] INFO  net.ooici.siamci.impl.ionmsg.SiamCiServerIonMsg - Reply sent to 'carueda.28453.100b' conv-id: '#55' user-id: 'ANONYMOUS' expiry: '0'
		
		04-10-2011 21:09:59,864 [SiamCiServerIonMsg] INFO  net.ooici.siamci.impl.ionmsg.SiamCiServerIonMsg - [12] Waiting for request ...
		04-10-2011 21:09:59,991 [SiamCiServerIonMsg] INFO  net.ooici.siamci.impl.ionmsg.SiamCiServerIonMsg - Request received from 'carueda.28453.105b'
		04-10-2011 21:09:59,993 [SiamCiServerIonMsg] INFO  net.ooici.siamci.impl.ionmsg.SiamCiServerIonMsg - convId received: #58
		04-10-2011 21:09:59,994 [SiamCiServerIonMsg] INFO  net.ooici.siamci.impl.ionmsg.SiamCiServerIonMsg - Reply sent to 'carueda.28453.105b' conv-id: '#58' user-id: 'ANONYMOUS' expiry: '0'
		
		04-10-2011 21:09:59,994 [SiamCiServerIonMsg] INFO  net.ooici.siamci.impl.ionmsg.SiamCiServerIonMsg - [13] Waiting for request ...
		04-10-2011 21:10:00,119 [SiamCiServerIonMsg] INFO  net.ooici.siamci.impl.ionmsg.SiamCiServerIonMsg - Request received from 'carueda.28453.110b'
		04-10-2011 21:10:00,121 [SiamCiServerIonMsg] INFO  net.ooici.siamci.impl.ionmsg.SiamCiServerIonMsg - convId received: #61
		04-10-2011 21:10:00,122 [SiamCiServerIonMsg] INFO  net.ooici.siamci.impl.ionmsg.SiamCiServerIonMsg - Reply sent to 'carueda.28453.110b' conv-id: '#61' user-id: 'ANONYMOUS' expiry: '0'
		
		04-10-2011 21:10:00,122 [SiamCiServerIonMsg] INFO  net.ooici.siamci.impl.ionmsg.SiamCiServerIonMsg - [14] Waiting for request ...
		04-10-2011 21:10:00,250 [SiamCiServerIonMsg] INFO  net.ooici.siamci.impl.ionmsg.SiamCiServerIonMsg - Request received from 'carueda.28453.115b'
		04-10-2011 21:10:00,253 [SiamCiServerIonMsg] WARN  siam.PortLister - UnmarshalException with device by id '1151'. Is the instrument jar in the classpath?
		04-10-2011 21:10:00,256 [SiamCiServerIonMsg] INFO  net.ooici.siamci.impl.ionmsg.SiamCiServerIonMsg - convId received: #64
		04-10-2011 21:10:00,256 [SiamCiServerIonMsg] INFO  net.ooici.siamci.impl.ionmsg.SiamCiServerIonMsg - Reply sent to 'carueda.28453.115b' conv-id: '#64' user-id: 'ANONYMOUS' expiry: '0'
		
		04-10-2011 21:10:00,256 [SiamCiServerIonMsg] INFO  net.ooici.siamci.impl.ionmsg.SiamCiServerIonMsg - [15] Waiting for request ...
		04-10-2011 21:10:00,390 [SiamCiServerIonMsg] INFO  net.ooici.siamci.impl.ionmsg.SiamCiServerIonMsg - Request received from 'carueda.28453.120b'
		04-10-2011 21:10:00,391 [SiamCiServerIonMsg] INFO  net.ooici.siamci.impl.ionmsg.SiamCiServerIonMsg - convId received: #67
		04-10-2011 21:10:00,393 [SiamCiServerIonMsg] INFO  net.ooici.siamci.impl.ionmsg.SiamCiServerIonMsg - Reply sent to 'carueda.28453.120b' conv-id: '#67' user-id: 'ANONYMOUS' expiry: '0'
		
		04-10-2011 21:10:00,393 [SiamCiServerIonMsg] INFO  net.ooici.siamci.impl.ionmsg.SiamCiServerIonMsg - [16] Waiting for request ...
		04-10-2011 21:10:00,516 [SiamCiServerIonMsg] INFO  net.ooici.siamci.impl.ionmsg.SiamCiServerIonMsg - Request received from 'carueda.28453.125b'
		04-10-2011 21:10:00,528 [SiamCiServerIonMsg] WARN  net.ooici.siamci.impl.RequestProcessor - set_params exception
		org.mbari.siam.distributed.InvalidPropertyException: 
		Unknown property: wrongParam
		
		
			at org.mbari.siam.core.BaseInstrumentService.setProperty(BaseInstrumentService.java:1630)
			at sun.reflect.GeneratedMethodAccessor13.invoke(Unknown Source)
			at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)
			at java.lang.reflect.Method.invoke(Method.java:597)
			at sun.rmi.server.UnicastServerRef.dispatch(UnicastServerRef.java:305)
			at sun.rmi.transport.Transport$1.run(Transport.java:159)
			at java.security.AccessController.doPrivileged(Native Method)
			at sun.rmi.transport.Transport.serviceCall(Transport.java:155)
			at sun.rmi.transport.tcp.TCPTransport.handleMessages(TCPTransport.java:535)
			at sun.rmi.transport.tcp.TCPTransport$ConnectionHandler.run0(TCPTransport.java:790)
			at sun.rmi.transport.tcp.TCPTransport$ConnectionHandler.run(TCPTransport.java:649)
			at java.util.concurrent.ThreadPoolExecutor$Worker.runTask(ThreadPoolExecutor.java:886)
			at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:908)
			at java.lang.Thread.run(Thread.java:680)
			at sun.rmi.transport.StreamRemoteCall.exceptionReceivedFromServer(StreamRemoteCall.java:255)
			at sun.rmi.transport.StreamRemoteCall.executeCall(StreamRemoteCall.java:233)
			at sun.rmi.server.UnicastRef.invoke(UnicastRef.java:142)
			at siam.test.devices.device1.TestSiamInstrument1_Stub.setProperty(Unknown Source)
			at siam.Siam.setPortProperties(Siam.java:193)
			at net.ooici.siamci.impl.RequestProcessor._setParams(RequestProcessor.java:364)
			at net.ooici.siamci.impl.RequestProcessor.processRequest(RequestProcessor.java:73)
			at net.ooici.siamci.impl.ionmsg.SiamCiServerIonMsg._dispatchRequest(SiamCiServerIonMsg.java:217)
			at net.ooici.siamci.impl.ionmsg.SiamCiServerIonMsg._run(SiamCiServerIonMsg.java:163)
			at net.ooici.siamci.impl.ionmsg.SiamCiServerIonMsg.run(SiamCiServerIonMsg.java:117)
			at java.lang.Thread.run(Thread.java:680)
		04-10-2011 21:10:00,529 [SiamCiServerIonMsg] INFO  net.ooici.siamci.impl.ionmsg.SiamCiServerIonMsg - convId received: #70
		04-10-2011 21:10:00,530 [SiamCiServerIonMsg] INFO  net.ooici.siamci.impl.ionmsg.SiamCiServerIonMsg - Reply sent to 'carueda.28453.125b' conv-id: '#70' user-id: 'ANONYMOUS' expiry: '0'
		
		04-10-2011 21:10:00,530 [SiamCiServerIonMsg] INFO  net.ooici.siamci.impl.ionmsg.SiamCiServerIonMsg - [17] Waiting for request ...
		04-10-2011 21:10:00,691 [SiamCiServerIonMsg] INFO  net.ooici.siamci.impl.ionmsg.SiamCiServerIonMsg - Request received from 'carueda.28453.130b'
		04-10-2011 21:10:00,691 [SiamCiServerIonMsg] INFO  net.ooici.siamci.impl.ionmsg.SiamCiServerIonMsg - Command with publish stream name: 'siamci.siamci_receiver_test_async'
		04-10-2011 21:10:00,692 [SiamCiServerIonMsg] INFO  net.ooici.siamci.impl.ionmsg.SiamCiServerIonMsg - convId received: #74
		04-10-2011 21:10:00,694 [SiamCiServerIonMsg] INFO  net.ooici.siamci.impl.ionmsg.SiamCiServerIonMsg - Reply sent to 'carueda.28453.130b' conv-id: '#74' user-id: 'ANONYMOUS' expiry: '0'
		
		04-10-2011 21:10:00,695 [SiamCiServerIonMsg] INFO  net.ooici.siamci.impl.ionmsg.SiamCiServerIonMsg - [18] Waiting for request ...

      
		
2011-04-09
	- Some code clean-up and documentation after the basic scheme for async handling
	  of requests. All tests (java, python, and java-python) pass.
	  
	- Initial test with checking of expected responses for async responses:
		$ SIAM_CI=-  bin/trial ion/siamci/test/test_siamci_async.py
	  SiamCiReceiverService keeps two sets, one with expected publish_id's and the
	  other with received (accepted) publish_ids. A final check is that all
	  expected id's were received. See the op_expect and op_acceptResponse operations.
	  NOTE: this is working but is a preliminary approach.
	   

2011-04-08
	- Successful build and tests against ionproto 0.3.15 and ioncore-jave 0.2.4.
	  NOTE: now, instead of retrieving the ionproto library from the ion-object-definitions,
	  this is retrieved from the version used by ioncore-java. See etc/build.xml
	  
	- Basic scheme for asynchronous handling of requests now completed. It is tested
	  with the getPortStatus operation. (other operations to follow.)
	  
	  Integration test:
	  	shell-1 $ mvn exec:java -Dsiam-ci
	  	shell-2 $ SIAM_CI=- bin/trial ion/siamci/test/test_siamci_async.py
	  
	
	
2011-04-07
	- Recreating communication originating from java (based on Thom's example, 2/22/11 email) 
	  in preparation for receiving asynchronous responses on the python side.
	  See SiamCiReceiverTest.java
	  
	- Note about assertion in IonBootstrap.java (ioncore-java):
        https://github.com/ooici/ioncore-java/blob/develop/src/ion/core/IonBootstrap.java#L98
	  this assertion always fails if assertions are enabled.
	  This assertion should be:
		assert GeneratedMessage.class.isAssignableFrom(messageClazz);
		
	- Doing preparations for asynchronous reply to requests.	
	
2011-04-06
	- Moved ISiam to siam package
	
2011-03-28
	- adding TestNG tests (*)
	  - siamcitest.BaseTestCase: base class for tests in the project
	  - siamcitest.ScTestListener: to shows some info (somewhat similar to Twisted Trial)
	  - siam.SiamTestCase: tests for the Siam class
	  - siam.Siam: added getNodeInfo
	(*) TestNG is more flexible than JUnit at least wrt skipping tests at runtime.
	
	- SiamTestCase tests now with parameters from SIAM environmental variable.
	  Example using maven:
		    SIAM="host=localhost port=testPort" mvn test -Dtest=SiamTestCase
	    where:
		 host: The host where the SIAM node program is running
		 port: the SIAM instrument port
	  To use the default values, set SIAM=-
	  All tests in SiamTestCase are skipped if SIAM is not set.

	- Siam-Ci program now accepting more parameters:
		$ mvn exec:java -Dsiam-ci -Dexec.args="--help"
		Option                                  Description                            
		------                                  -----------                            
		-?, --help                              print help message                     
		--brokerHost <host>                     Broker host (default: localhost)       
		--brokerPort <port>                     Broker port (default: 5672)            
		--queue <name>                          Queue name (default: SIAM-CI)          
		--siam <host>                           SIAM node host (default: localhost)    
	
		
2011-03-24
	- show the available ports at initialization of SiamCiMain.
	- when unmarshalling error: log.warn with no exception and log.debug with the exception 
	- consistent use of slf4j in the various sources
	- Moved python elements to [src/main/python/]ion/siamci/
	  Once the SIAM-CI adapter is running, the python tests can be run as follows:
	  	$ cd /path/to/ioncore-python
	  	$ ln -s /path/to/siamci/src/main/python/ion/siamci ion/
	  	$ SIAM_CI="-" bin/trial ion/siamci/test/
	
2011-03-23
	- new class SiamCiTestCase(IonTestCase) as the base class for all SIAM-CI tests in python.
	  the SIAM_CI env variable is used to actually run the tests.
	- SiamCiMain now accepts parameters using jopt-simple (currently --siam, and --help) 
	- Graceful termination with ^C
	  
2011-03-22
	- Moved net.ooici.play.instr.instrument_defs.proto --> net.ooici.play.instr_driver_interface.proto
	
	- NOTE: upon refresh of the ioncore-python and ioncore-java clones, the python-java communication
	  was broken.  It turns out the "user-id" and "expiry" headers are now required for proper handling on 
	  the python side. Fixed now.  See SiamCiServerIonMsg._run().
	  
	
2011-03-21
	- Adjustments upon clone updates of ion-object-definitions, ioncore-python 
	
	
2011-03-08
	- organized logging output and added log4.properties
	- SiamCiServerIonMsg: temporary use of System.setOut to a file as ioncore-java writes some messages to
	  stdout.
	
	- More consistent handling of instrument driver operations (fetch_params, set_params, get_status, 
	  get_last_sample, list_ports, etc).  However, this is yet to be completed as the data structures
	  suggested by [1] and [2] are harmonized.
	  [1] https://confluence.oceanobservatories.org/display/CIDev/Instrument+Driver+Interface
	  [2] ioncore-python: ion/agents/instrumentagents/instrument_agent.py
	  
	- More TODOs and FIXMEs annotations in the code.
	
	Current test:
	
	- - - - - -  In <base_dir>/siamci  - - - - - - -
	$ mvn clean compile exec:java -Dsiam-ci
	03-08-2011 22:21:13,182 [net.ooici.siamci.SiamCiMain.main()] DEBUG siam.Siam - getNodeURL(): input=localhost
	03-08-2011 22:21:13,407 [net.ooici.siamci.SiamCiMain.main()] INFO  net.ooici.siamci.SiamCiMain - siamCiFactory: net.ooici.siamci.impl.SiamCiFactoryImpl
	03-08-2011 22:21:13,407 [net.ooici.siamci.SiamCiMain.main()] INFO  net.ooici.siamci.SiamCiMain - siam: siam.Siam
	03-08-2011 22:21:13,408 [net.ooici.siamci.SiamCiMain.main()] INFO  net.ooici.siamci.SiamCiMain - requestProcessor: net.ooici.siamci.impl.RequestProcessor
	03-08-2011 22:21:13,408 [net.ooici.siamci.SiamCiMain.main()] INFO  net.ooici.siamci.SiamCiMain - siamCiAdapter: net.ooici.siamci.impl.ionmsg.SiamCiAdapterIonMsg
	03-08-2011 22:21:13,409 [net.ooici.siamci.SiamCiMain.main()] INFO  net.ooici.siamci.impl.ionmsg.SiamCiServerIonMsg - Creating SiamCiProcess
	03-08-2011 22:21:13,525 [net.ooici.siamci.SiamCiMain.main()] INFO  net.ooici.siamci.impl.ionmsg.SiamCiAdapterIonMsg - starting process
	03-08-2011 22:21:13,526 [SiamCiServerIonMsg] INFO  net.ooici.siamci.impl.ionmsg.SiamCiServerIonMsg - Running SiamCiServerIonMsg
	03-08-2011 22:21:13,526 [SiamCiServerIonMsg] INFO  net.ooici.siamci.impl.ionmsg.SiamCiServerIonMsg - Waiting for request ...
	

	- - - - - -  In <base_dir>/ioncore-python  - - - - - - -
	(py_buildout)carueda:ioncore-python carueda$ trial ion/agents/instrumentagents/test/test_Siam*.py
	ion.agents.instrumentagents.test.test_SiamCi
	  TestSiamCi
	    test_fetch_params_all ...                                              [OK]
	    test_fetch_params_some ...                                             [OK]
	    test_get_last_sample ...                                               [OK]
	    test_get_status ...                                                    [OK]
	    test_list_ports ...                                                    [OK]
	    test_ping ...                                                          [OK]
	    test_set_params ...                                                    [OK]
	ion.agents.instrumentagents.test.test_Siam
	  TestSiam
	    test_execute ...                                                  [SKIPPED]
	    test_fetch_params_all ...                                              [OK]
	    test_fetch_params_some ...                                             [OK]
	    test_fetch_set ...                                                     [OK]
	    test_get_last_sample ...                                               [OK]
	    test_get_status ...                                                    [OK]
	    test_initialize ...                                               [SKIPPED]
	    test_list_ports ...                                                    [OK]
	    test_ping ...                                                          [OK]
	
	===============================================================================
	[SKIPPED]
	Not implemented yet
	
	ion.agents.instrumentagents.test.test_Siam.TestSiam.test_execute
	ion.agents.instrumentagents.test.test_Siam.TestSiam.test_initialize
	-------------------------------------------------------------------------------
	Ran 16 tests in 7.413s
	
	PASSED (skips=2, successes=14)



2011-03-07
	- ION messaging finally working. Using the following for the basic functionality
		- src/main/java/ion/example/IonSimpleEcho
		- src/main/java/ion/example/EchoClientTest
		- src/main/python/ion/agents/instrumentagents/test/test_echo_service_in_java.py
		The latter is hard linked to ../ioncore-python/ion/agents/instrumentagents/test/test_echo_service_in_java.py
		to faciliate test from the ioncore-python.
		
	Now, preparing SIAM-CI adapter code to enable this ION messaging mechanism.
	- New IRequestProcessor (and corresponding implementation) to decouple the processing of requests from
	  the actual messaging mechanism.
	- Updated various sources according to this refactoring and updated ION-related implemention of 
	  the ISiamCiAdapter interface, see in particular SiamCiServerIonMsg, which is the one directly
	  related with messaging using ION mechanism.
	  
	- SiamCi_proxy.py  now working with ION messaging; see test_SiamCi.py
	- SiamCi_driver.py now working with ION messaging; see test_Siam.py
	
	The test runs as follows:
	
	- - - - - -  In <base_dir>/siamci  - - - - - - -
	$ mvn clean compile exec:java -Dsiam-ci
	net.ooici.siamci.impl.RequestProcessor.<init>(){38} - CommandProcessor created.
	net.ooici.siamci.SiamCiMain.<init>(){53} - siamCiFactory: net.ooici.siamci.impl.SiamCiFactoryImpl
	net.ooici.siamci.SiamCiMain.<init>(){54} - siam: siam.Siam
	net.ooici.siamci.SiamCiMain.<init>(){55} - requestProcessor: net.ooici.siamci.impl.RequestProcessor
	net.ooici.siamci.SiamCiMain.<init>(){56} - siamCiAdapter: net.ooici.siamci.impl.ionmsg.SiamCiAdapterIonMsg
	net.ooici.siamci.impl.ionmsg.SiamCiServerIonMsg.<init>(){78} - Creating SiamCiProcess
	Opened channel on host localhost, port 5672
	Declared queue SIAM-CI
	Bound queue SIAM-CI to exchange magnet.topic with binding key SIAM-CI
	net.ooici.siamci.impl.ionmsg.SiamCiAdapterIonMsg.start(){34} - starting process
	net.ooici.siamci.impl.ionmsg.SiamCiServerIonMsg.run(){91} - Running SiamCiServerIonMsg
	net.ooici.siamci.impl.ionmsg.SiamCiServerIonMsg._run(){112} - Waiting for request ...

	
	- - - - - -  In <base_dir>/ioncore-python  - - - - - - -
	(py_buildout)carueda:ioncore-python carueda$ trial ion/agents/instrumentagents/test/test_Siam*.py
	ion.agents.instrumentagents.test.test_SiamCi
	  TestSiamCi
	    test_get_last_sample ...                                               [OK]
	    test_get_status ...                                                    [OK]
	    test_list_ports ...                                                    [OK]
	    test_ping ...                                                          [OK]
	ion.agents.instrumentagents.test.test_Siam
	  TestSiam
	    test_get_last_sample ...                                               [OK]
	    test_get_status ...                                                    [OK]
	    test_initialize ...                                               [SKIPPED]
	    test_list_ports ...                                                    [OK]
	    test_ping ...                                                          [OK]
	
	===============================================================================
	[SKIPPED]
	Not implemented yet
	
	ion.agents.instrumentagents.test.test_Siam.TestSiam.test_initialize
	-------------------------------------------------------------------------------
	Ran 9 tests in 5.835s
	
	PASSED (skips=1, successes=8)
	


2011-02-27
	- Incorporated more SIAM functionality into the tests. 
	  A simple interface, ISiam, and corresponding implementation, Siam, were created to facilitate
	  operations in the SIAM-CI adapter, in concrete, SiamCiServerGpb.
	  
	- Included (via hard link) TestSiamInstrument1.java from my local image of the SIAM code base
	  so it gets into this project's git repo.
	  The package is siam.test.devices.device1, which also includes corresp. Makefile to be
	  used in the main SIAM directory to create the instrument service JAR. 
	  
	- Included (via hard link) net/ooici/play/instr/instrument_defs.proto from my local image of 
	  the ion-object-definitions project so it gets into this project's git repo.
	  The location here is under src/main/gpb.
	  
	- Updated documentation.
	
	
2011-02-26
	- Basic functionality about RPC requests from python and corresponding replies from java
	  is now enabled. This is using GPB messages directly (not ION messages).
	  Unfortunately, it was confusing how to implement an ION-based messaging mechanism. 
	  In particular, the rpc_send methods, although straightforward to use against services 
	  running in the python capability container, are not suitable (or I couldn't figure) for 
	  use against external services (like SiamCiServerGpb).
	  
	- SiamCiServerGpb: this is the RPC server using GPB messages directly. It can be tested
	  with the gpb_send_rpc.py script and also with new scripts on the ioncore-python side.
	  New modules under src/main/python/ion/agents/instrumentagents/:
		SiamCi_proxy  -- Client to the SiamCi adapter
		test/test_SiamCi.py
	
	Tests:
	- Run the SIAM-CI adapter:
		$ mvn compile exec:java -Dsiam-ci
		===========Waiting for call============
		net.ooici.siamci.impl.gpb.SiamCiServerGpb._run(){89} -  [x] Received body len 31
		net.ooici.siamci.impl.gpb.SiamCiServerGpb._run(){90} -  [x]   with replyTo= 'amq.gen-EBgFII0MOraQRHhvdg8rLA==' corr_id='85d59ebf-a405-49ad-9fd1-0b19b50ea9c9'
		net.ooici.siamci.impl.gpb.SiamCiServerGpb._run(){91} -  [x]     contentType= 'application/octet-stream'
		net.ooici.siamci.impl.gpb.SiamCiServerGpb._showMessage(){138} -  [x] Command received:
		    class net.ooici.play.instr.InstrumentDefs$Command
		    | command: "hiCmd"
		    | args {
		    |   channel: "ch1"
		    |   parameter: "pr1"
		    | }
		    | args {
		    |   channel: "ch2"
		    |   parameter: "pr2"
		    | }
		net.ooici.siamci.impl.gpb.SiamCiServerGpb._showMessage(){138} -  [x] Response replied:
		    class net.ooici.play.instr.InstrumentDefs$SuccessFail
		    | result: ERROR
		    | item {
		    |   type: STR
		    |   str: "Command \'hiCmd\' not implemented"
		    | }
		
	- A simple client:
		$ python src/main/python/play/pika/gpb_send_rpc.py 
		[INFO     2011-02-26 23:17:56,849  #36891] Sending command WITH CORR ID: 85d59ebf-a405-49ad-9fd1-0b19b50ea9c9
		[INFO     2011-02-26 23:17:56,850  #36891] Command sent:
		    <class 'net.ooici.play.instr.instrument_defs_pb2.Command'>
		    | command: "hiCmd"
		    | args {
		    |   channel: "ch1"
		    |   parameter: "pr1"
		    | }
		    | args {
		    |   channel: "ch2"
		    |   parameter: "pr2"
		    | }
		    | 
		[INFO     2011-02-26 23:17:56,853  #36891] correlation_id --> None
		[INFO     2011-02-26 23:17:56,854  #36891] Command received:
		    <class 'net.ooici.play.instr.instrument_defs_pb2.Command'>
		    | args {
		    |   parameter: "Command \'hiCmd\' not implemented"
		    | }
		    
	- with the server running, run the test on ioncore-python:
		(py_buildout)carueda:ioncore-python carueda$ trial ion/agents/instrumentagents/test/test_SiamCi.py
		...
		ion.agents.instrumentagents.test.test_SiamCi
		  TestSiamCi
		    test_ping ... ping response:
		    <class 'net.ooici.play.instr.instrument_defs_pb2.SuccessFail'>
		    | result: OK
		    | 
		                                                         [OK]
		
		-------------------------------------------------------------------------------
		Ran 1 tests in 0.731s
		
		PASSED (successes=1)
		 	
	
	
2011-02-24
	- project now hosted at http://gitorious.org/siamci
	- made hard links to Siam_driver.py and test_Siam.py to facilitate version control for the moment.
	
	- Created profiles in the pom to facilitate tests from the command line, and updated README.
	
2011-02-23
	- added src/main/python/ion/agents/instrumentagents/ directory to keep a copy of:
		Siam_driver.py
		test/test_Siam.py
	  from my local image of ioncore-python, while these elements get pushed to an appropriate OOICI repo.
	  
	- Updated dependencies according to recent updates in ion-object-definitions and ioncore-java
	
	- Initial structure of interfaces (ISiamCiFactory, ISiamCiAdapter) and
	  preliminary implementation. 
	  
	- The overall implementation idea is as follows:
		- The SIAM-CI adapter launches a process to dispatch messages received on a certain queue 
		  (by default called SIAM-CI).
		- IonMock: a simple program that sends a message to the adapter and displays the response.
		  This is while the corresponding functionality is enabled on the python side.
		  
	- Test:
	
		1- have rabbitmq running on localhost
		
		2- launch SiamCiMain
			net.ooici.siamci.impl.SiamCiProcess.<init>(){35} - Creating SiamCiProcess
			Opened channel on host localhost, port 5672
			Declared queue amq.gen-ObUk6ROJeWxx4EuS3vsbzg==
			Bound queue amq.gen-ObUk6ROJeWxx4EuS3vsbzg== to exchange magnet.topic with binding key 375a55fb-56e8-4bed-b874-2b19d06c2fb0.1
			Spawned process 375a55fb-56e8-4bed-b874-2b19d06c2fb0.1
			net.ooici.siamci.impl.SiamCiAdapterImpl.start(){28} - starting process
			net.ooici.siamci.impl.SiamCiProcess.run(){44} - Running SiamCiProcess
			net.ooici.siamci.impl.SiamCiProcess._run(){62} - 
			===================================================================
			Waiting for message ...
					
		3- Run IonMock  -- 
		  Lots of lines including:
			net.ooici.siamci.ion.IonMock.testSendReceive(){41} - 
			>>>>>>>>>>>>>>>>>Test Send/Receive<<<<<<<<<<<<<<<<<
			...			
			============== Object ==============
			command: "get"
			args {
			  channel: "ch1"
			  parameter: "foo"
			}
			====================================
			
			...			
			net.ooici.siamci.ion.IonMock.testSendReceive(){48} - 
			******Prepare MsgBrokerClient******
			Opened channel on host localhost, port 5672
			Declared queue amq.gen-LaiEgQzLZjbebRQOuQOPwg==
			Bound queue amq.gen-LaiEgQzLZjbebRQOuQOPwg== to exchange magnet.topic with binding key dfa2afb3-3aef-4e62-8229-fb57e0a0f49b.1
			Spawned process dfa2afb3-3aef-4e62-8229-fb57e0a0f49b.1
			net.ooici.siamci.ion.IonMock.testSendReceive(){56} - 
			******RPC Send******
			Sent message to exchange magnet.topic with routing key testing.siam-ci, msglen 363
			set encoding to: application/ion-jsond
			Message received on queue amq.gen-LaiEgQzLZjbebRQOuQOPwg==, msglen 400
			net.ooici.siamci.ion.IonMock.testSendReceive(){61} - 
			******Unpack Message******
			net.ooici.siamci.ion.IonMock.testSendReceive(){63} -  reply.getContent class = class java.lang.String
			net.ooici.siamci.ion.IonMock.testSendReceive(){65} - !!!!!!!! content is String -- using getBytes  !!!!!
			...		
			
		 While SiamCiMain outputs:
			set encoding to: ION R1 GPB
			Message received on queue SIAM-CI, msglen 363
			net.ooici.siamci.impl.SiamCiProcess._run(){72} - headers: {sender=dfa2afb3-3aef-4e62-8229-fb57e0a0f49b.1, receiver=testing.siam-ci, op=respond, conv-id=#0, encoding=ION R1 GPB, reply-to=dfa2afb3-3aef-4e62-8229-fb57e0a0f49b.1, accept-encoding=application/ion-jsond, conv-seq=1}
			net.ooici.siamci.impl.SiamCiProcess._run(){81} - receiver = testing.siam-ci    reply-to: dfa2afb3-3aef-4e62-8229-fb57e0a0f49b.1
			Sent message to exchange magnet.topic with routing key dfa2afb3-3aef-4e62-8229-fb57e0a0f49b.1, msglen 400
			net.ooici.siamci.impl.SiamCiProcess._run(){62} - 
			===================================================================
			Waiting for message ...
		 	
		
		
2011-02-21
	- various updates according to newest images of ion-object-definitions and ioncore-java.
	- etc/build.xml: "install" macro
	- ion.example: EchoClientTest and IonSimpleEcho: a simple test of communication of messages
	  related with instruments, which I added to my fork carueda/ion-object-definitions
	
2011-02-09
	- initial preparations for using maven and setting up dependencies on incore-java and
	  SIAM libraries. Initial test with emulating SIAM's listPort utility OK.
	- I'm hosting this project on a personal SVN repository for the moment.